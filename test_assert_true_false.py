
import fk_email_validator
from fk_email_validator import validateEmail

LAUFENDE_ZAHL = 0
COUNT_ASSERT_IS_TRUE = 0
COUNT_ASSERT_IS_FALSE = 0
TRUE_RESULT_COUNT_EMAIL_IS_TRUE = 0
TRUE_RESULT_COUNT_EMAIL_IS_FALSE = 0
FALSE_RESULT_COUNT_EMAIL_IS_TRUE = 0
FALSE_RESULT_COUNT_EMAIL_IS_FALSE = 0
FALSE_RESULT_COUNT_ERROR = 0
TRUE_RESULT_COUNT_ERROR = 0

def assertIsTrue( pInput='' ):
    
    global COUNT_ASSERT_IS_TRUE
    global TRUE_RESULT_COUNT_EMAIL_IS_TRUE
    global TRUE_RESULT_COUNT_EMAIL_IS_FALSE
    
    COUNT_ASSERT_IS_TRUE += 1
    
    knz_is_valid_email_adress = validateEmail( pInput )
    
    if ( knz_is_valid_email_adress < 10 ):
        
        TRUE_RESULT_COUNT_EMAIL_IS_TRUE += 1
        
        print(f'assertIsTrue  OK {knz_is_valid_email_adress} "{pInput}" ')
        
    else:
        
        TRUE_RESULT_COUNT_EMAIL_IS_FALSE += 1
        
        print(f'assertIsTrue  #### Fehler {knz_is_valid_email_adress} #### "{pInput}" ')
        
def assertIsFalse(  pInput='' ):
    
    global COUNT_ASSERT_IS_FALSE
    global FALSE_RESULT_COUNT_EMAIL_IS_TRUE
    global FALSE_RESULT_COUNT_EMAIL_IS_FALSE
    
    COUNT_ASSERT_IS_FALSE += 1
    
    knz_is_valid_email_adress = validateEmail( pInput )
    
    if ( knz_is_valid_email_adress >= 10 ):
        
        FALSE_RESULT_COUNT_EMAIL_IS_FALSE += 1
        
        print(f'assertIsFalse OK {knz_is_valid_email_adress} "{pInput}" ')
        
    else:
        
        FALSE_RESULT_COUNT_EMAIL_IS_TRUE += 1
        
        print(f'assertIsFalse #### Fehler {knz_is_valid_email_adress} #### "{pInput}" ')
        
def wlHeadline( pString = '' ):
    print( '' )
    print( f"---- {pString} ---------------------------------------------")
    print( '' )
    
def wl( pString = '' ):
    print( f'{pString}')

def getEinzug( pZahl ):

    str_leerstellen = ""
    
    str_konvert = str( pZahl )
    
    if ( len( str_konvert ) < 10 ):
        str_leerstellen = "   "
        
    elif ( len( str_konvert )  < 100 ):
        str_leerstellen = "  "

    elif ( len( str_konvert )  < 100 ):
        str_leerstellen = " "
        
    str_leerstellen += str(str_konvert)
    
    return str( str_leerstellen )

def formatDouble( pZahl, pAnzahlStellen = 5 ):
    
    return  '%.5f' % pZahl
        
def runTestCorrect():
            
    wlHeadline( "Correct" )

    assertIsFalse( "n@d.t" )
    assertIsTrue( "n@d.td" )
    assertIsTrue( "1@2.td" )
    assertIsTrue( "12.345@678.90.tld" )

    assertIsTrue( "name1.name2@domain1.tld" )
    assertIsTrue( "name1+name2@domain1.tld" )
    assertIsTrue( "name1-name2@domain1.tld" )
    assertIsTrue( "name1.name2@subdomain1.domain1.tld" )
    assertIsTrue( "name1.name2@subdomain1.tu-domain1.tld" )
    assertIsTrue( "name1.name2@subdomain1.tu_domain1.tld" )

    assertIsTrue( "escaped.at\\@.sign@domain.tld" )
    assertIsTrue( "\"at.sign.@\".in.string@domain.tld" )

    assertIsTrue( "ip4.adress@[1.2.3.4]" )
    assertIsTrue( "ip6.adress@[IPv6:1:2:3:4:5:6:7:8]" )
    assertIsTrue( "ip4.embedded.in.ip6@[IPv6::ffff:127.0.0.1]" )
    assertIsTrue( "ip4.without.brackets@1.2.3.4" )

    assertIsTrue( "\"string1\".name1@domain1.tld" )
    assertIsTrue( "name1.\"string1\"@domain1.tld" )
    assertIsTrue( "name1.\"string1\".name2@domain1.tld" )
    assertIsTrue( "name1.\"string1\".name2@subdomain1.domain1.tld" )
    assertIsTrue( "\"string1\".\"quote2\".name1@domain1.tld" )
    assertIsTrue( "\"string1\"@domain1.tld" )
    assertIsTrue( "\"string1\\\"embedded string\\\"\"@domain1.tld" )
    assertIsTrue( "\"string1(embedded comment)\"@domain1.tld" )

    assertIsTrue( "(comment1)name1@domain1.tld" )
    assertIsTrue( "(comment1)-name1@domain1.tld" )
    assertIsTrue( "name1(comment1)@domain1.tld" )
    assertIsTrue( "name1@(comment1)domain1.tld" )
    assertIsTrue( "name1@domain1.tld(comment1)" )
    assertIsTrue( "(spaces after comment)     name1.name2@domain1.tld" )
    assertIsTrue( "name1.name2@domain1.tld   (spaces before comment)" )

    assertIsTrue( "(comment1.\\\"comment2)name1@domain1.tld" )

    assertIsTrue( "(comment1.\\\"String\\\")name1@domain1.tld" )
    assertIsTrue( "(comment1.\\\"String\\\".@domain.tld)name1@domain1.tld" )

    assertIsTrue( "(comment1)name1.ip4.adress@[1.2.3.4]" )
    assertIsTrue( "name1.ip4.adress(comment1)@[1.2.3.4]" )
    assertIsTrue( "name1.ip4.adress@(comment1)[1.2.3.4]" )
    assertIsTrue( "name1.ip4.adress@[1.2.3.4](comment1)" )

    assertIsTrue( "(comment1)\"string1\".name1@domain1.tld" )
    assertIsTrue( "(comment1)name1.\"string1\"@domain1.tld" )
    assertIsTrue( "name1.\"string1\"(comment1)@domain1.tld" )
    assertIsTrue( "\"string1\".name1(comment1)@domain1.tld" )
    assertIsTrue( "name1.\"string1\"@(comment1)domain1.tld" )
    assertIsTrue( "\"string1\".name1@domain1.tld(comment1)" )

    assertIsTrue( "<name1.name2@domain1.tld>" )
    assertIsTrue( "name3 <name1.name2@domain1.tld>" )
    assertIsTrue( "<name1.name2@domain1.tld> name3" )
    assertIsTrue( "\"name3 name4\" <name1.name2@domain1.tld>" )

    assertIsTrue( "name1 <ip4.adress@[1.2.3.4]>" )
    assertIsTrue( "name1 <ip6.adress@[IPv6:1:2:3:4:5:6:7:8]>" )
    assertIsTrue( "<ip4.adress@[1.2.3.4]> name1" )
    assertIsTrue( "<ip6.adress@[IPv6:1:2:3:4:5:6:7:8]> name 1" )

    assertIsTrue( "\"display name\" <(comment)local.part@domain-name.top_level_domain>" )
    assertIsTrue( "\"display name\" <local.part@(comment)domain-name.top_level_domain>" )
    assertIsTrue( "\"display name\" <(comment) local.part.\"string1\"@domain-name.top_level_domain>" )

    assertIsTrue( "\"display name \\\"string\\\" \" <(comment)local.part@domain-name.top_level_domain>" )
    assertIsTrue( "\"display name \\\"string\\\" \" <(comment)local.part.wiht.escaped.at\\@.sign@domain-name.top_level_domain>" )

    assertIsTrue( "name1\\@domain1.tld.name1@domain1.tld" )
    assertIsTrue( "\"name1\\@domain1.tld\".name1@domain1.tld" )
    assertIsTrue( "\"name1\\@domain1.tld \\\"name1\\@domain1.tld\\\"\".name1@domain1.tld" )
    assertIsTrue( "\"name1\\@domain1.tld \\\"name1\\@domain1.tld\\\"\".name1@domain1.tld (name1@domain1.tld)" )
    assertIsTrue( "(name1@domain1.tld) name1@domain1.tld" )
    assertIsTrue( "(name1@domain1.tld) \"name1\\@domain1.tld\".name1@domain1.tld" ) 
    assertIsTrue( "(name1@domain1.tld) name1.\"name1\\@domain1.tld\"@domain1.tld" )

def runTestAtSign():
    
    wlHeadline( "AT-Sign" )

    assertIsFalse( "1234567890" )
    assertIsFalse( "OnlyTextNoDotNoAt" )
    assertIsFalse( "email.with.no.at.sign" )
    assertIsFalse( "email.with.no.domain@" )
    assertIsFalse( "@@domain.com" )

    assertIsFalse( "name1.@domain.com" )
    assertIsFalse( "name1@.domain.com" )
    assertIsFalse( "@name1.at.domain.com" )
    assertIsFalse( "name1.at.domain.com@" )
    assertIsFalse( "name1@name2@domain.com" )

    assertIsFalse( "email.with.no.domain\\@domain.com" )
    assertIsFalse( "email.with.no.domain\\@.domain.com" )
    assertIsFalse( "email.with.no.domain\\@123domain.com" )
    assertIsFalse( "email.with.no.domain\\@_domain.com" )
    assertIsFalse( "email.with.no.domain\\@-domain.com" )
    assertIsFalse( "email.with.double\\@no.domain\\@domain.com" )
    assertIsTrue( "\"wrong.at.sign.combination.in.string1@.\"@domain.com" )
    assertIsTrue( "\"wrong.at.sign.combination.in.string2.@\"@domain.com" )

    assertIsTrue( "email.with.escaped.at\\@.sign.version1@domain.com" )
    assertIsTrue( "email.with.escaped.\\@.sign.version2@domain.com" )
    assertIsTrue( "email.with.escaped.at\\@123.sign.version3@domain.com" )
    assertIsTrue( "email.with.escaped.\\@123.sign.version4@domain.com" )
    assertIsTrue( "email.with.escaped.at\\@-.sign.version5@domain.com" )
    assertIsTrue( "email.with.escaped.\\@-.sign.version6@domain.com" )
    assertIsTrue( "email.with.escaped.at.sign.\\@@domain.com" )

    assertIsTrue( "(@) email.with.at.sign.in.commet1@domain.com" )
    assertIsTrue( "email.with.at.sign.in.commet2@domain.com (@)" )
    assertIsTrue( "email.with.at.sign.in.commet3@domain.com (.@)" )

    assertIsFalse( "@@email.with.unescaped.at.sign.as.local.part" )
    assertIsTrue( "\\@@email.with.escaped.at.sign.as.local.part" )
    assertIsFalse( "@.local.part.starts.with.at@domain.com" )
    assertIsFalse( "@no.local.part.com" )
    assertIsFalse( "@@@@@@only.multiple.at.signs.in.local.part.com" )

    assertIsFalse( "local.part.with.two.@at.signs@domain.com" )
    assertIsFalse( "local.part.ends.with.at.sign@@domain.com" )
    assertIsFalse( "local.part.with.at.sign.before@.point@domain.com" )
    assertIsFalse( "local.part.with.at.sign.after.@point@domain.com" )
    assertIsFalse( "local.part.with.double.at@@test@domain.com" )
    assertIsTrue( "(comment @) local.part.with.at.sign.in.comment@domain.com" )
    assertIsTrue( "domain.part.with.comment.with.at@(comment with @)domain.com" )
    assertIsFalse( "domain.part.with.comment.with.qouted.at@(comment with \\@)domain.com" )
    assertIsTrue( "\"String@\".local.part.with.at.sign.in.string@domain.com" )
    assertIsTrue( "\\@.\\@.\\@.\\@.\\@.\\@@domain.com" )
    assertIsFalse( "\\@.\\@.\\@.\\@.\\@.\\@@at.sub\\@domain.com" )
    assertIsFalse( "@.@.@.@.@.@@domain.com" )
    assertIsFalse( "@.@.@." )
    assertIsFalse( "\\@.\\@@\\@.\\@" )
    assertIsFalse( "@" )
    assertIsFalse( "name @ <pointy.brackets1.with.at.sign.in.display.name@domain.com>" )
    assertIsFalse( "<pointy.brackets2.with.at.sign.in.display.name@domain.com> name @" )
    assertIsTrue( "<pointy.brackets3.with.escaped.at.sign.in.display.name@domain.com> name \\@" )

def runTestSeperator():
        
    wlHeadline( "Seperator" )

    assertIsFalse( "EmailAdressWith@NoDots" )

    assertIsFalse( "..local.part.starts.with.dot@domain.com" )
    assertIsFalse( "local.part.ends.with.dot.@domain.com" )
    assertIsTrue( "local.part.with.dot.character@domain.com" )
    assertIsFalse( "local.part.with.dot.before..point@domain.com" )
    assertIsFalse( "local.part.with.dot.after..point@domain.com" )
    assertIsFalse( "local.part.with.double.dot..test@domain.com" )
    assertIsTrue( "(comment .) local.part.with.dot.in.comment@domain.com" )
    assertIsTrue( "\"string.\".local.part.with.dot.in.String@domain.com" )
    assertIsFalse( "\"string\\.\".local.part.with.escaped.dot.in.String@domain.com" )
    assertIsFalse( ".@local.part.only.dot.domain.com" )
    assertIsFalse( "......@local.part.only.consecutive.dot.domain.com" )
    assertIsFalse( "...........@dot.domain.com" )
    assertIsFalse( "name . <pointy.brackets1.with.dot.in.display.name@domain.com>" )
    assertIsFalse( "<pointy.brackets2.with.dot.in.display.name@domain.com> name ." )

    assertIsTrue( "domain.part@with.dot.com" )
    assertIsFalse( "domain.part@.with.dot.at.domain.start.com" )
    assertIsFalse( "domain.part@with.dot.at.domain.end1..com" )
    assertIsFalse( "domain.part@with.dot.at.domain.end2.com." )
    assertIsFalse( "domain.part@with.dot.before..point.com" )
    assertIsFalse( "domain.part@with.dot.after..point.com" )
    assertIsFalse( "domain.part@with.consecutive.dot..test.com" )
    assertIsTrue( "domain.part.with.dot.in.comment@(comment .)domain.com" )
    assertIsFalse( "domain.part.only.dot@..com" )
    assertIsFalse( "top.level.domain.only@dot.." )

    assertIsFalse( "...local.part.starts.with.double.dot@domain.com" )
    assertIsFalse( "local.part.ends.with.double.dot..@domain.com" )
    assertIsFalse( "local.part.with.double.dot..character@domain.com" )
    assertIsFalse( "local.part.with.double.dot.before...point@domain.com" )
    assertIsFalse( "local.part.with.double.dot.after...point@domain.com" )
    assertIsFalse( "local.part.with.double.double.dot....test@domain.com" )
    assertIsTrue( "(comment ..) local.part.with.double.dot.in.comment@domain.com" )
    assertIsTrue( "\"string..\".local.part.with.double.dot.in.String@domain.com" )
    assertIsFalse( "\"string\\..\".local.part.with.escaped.double.dot.in.String@domain.com" )
    assertIsFalse( "..@local.part.only.double.dot.domain.com" )
    assertIsFalse( "............@local.part.only.consecutive.double.dot.domain.com" )
    assertIsFalse( ".................@double.dot.domain.com" )
    assertIsFalse( "name .. <pointy.brackets1.with.double.dot.in.display.name@domain.com>" )
    assertIsFalse( "<pointy.brackets2.with.double.dot.in.display.name@domain.com> name .." )

    assertIsFalse( "domain.part@with..double.dot.com" )
    assertIsFalse( "domain.part@..with.double.dot.at.domain.start.com" )
    assertIsFalse( "domain.part@with.double.dot.at.domain.end1...com" )
    assertIsFalse( "domain.part@with.double.dot.at.domain.end2.com.." )
    assertIsFalse( "domain.part@with.double.dot.before...point.com" )
    assertIsFalse( "domain.part@with.double.dot.after...point.com" )
    assertIsFalse( "domain.part@with.consecutive.double.dot....test.com" )
    assertIsTrue( "domain.part.with.comment.with.double.dot@(comment ..)domain.com" )
    assertIsFalse( "domain.part.only.double.dot@...com" )
    assertIsFalse( "top.level.domain.only@double.dot..." )
    
def runTestIP4():
    wlHeadline( "IP V4" )

    assertIsFalse( "\"\"@[]" )
    assertIsFalse( "\"\"@[1" )
    assertIsFalse( "A+B@[1[2[3[4[5[6(1(2(3(4(5(6(7(8)(9)]{break{that{reg{ex[state(ment}[({})" )
    assertIsFalse( "[1.2.3.4]@[5.6.7.8]" )
    assertIsFalse( "1.2.3.4]@[5.6.7.8]" )
    assertIsFalse( "[1.2.3.4@[5.6.7.8]" )
    assertIsFalse( "[1.2.3.4][5.6.7.8]@[9.10.11.12]" )
    assertIsFalse( "[1.2.3.4]@[5.6.7.8][9.10.11.12]" )
    assertIsFalse( "[1.2.3.4]@[5.6.7.8]9.10.11.12]" )
    assertIsFalse( "[1.2.3.4]@[5.6.7.8][9.10.11.12[" )

    assertIsTrue( "ip4.in.local.part.as.string1.\"[1.2.3.4]\"@[5.6.7.8]" )
    assertIsTrue( "ip4.in.local.part.as.string2.\"@[1.2.3.4]\"@[5.6.7.8]" )
    assertIsFalse( "ip4.ends.with.alpha.character1@[1.2.3.Z]" )
    assertIsFalse( "ip4.ends.with.alpha.character2@[1.2.3.]Z" )
    assertIsFalse( "ip4.ends.with.top.level.domain@[1.2.3.].de" )

    assertIsFalse( "ip4.with.double.ip4@[1.2.3.4][5.6.7.8]" )

    assertIsFalse( "ip4.with.ip4.in.comment1@([1.2.3.4])" )
    assertIsFalse( "ip4.with.ip4.in.comment2@([1.2.3.4])[5.6.7.8]" )
    assertIsFalse( "ip4.with.ip4.in.comment3@[1.2.3.4]([5.6.7.8])" )

    assertIsTrue( "ip4.with.ip4.in.comment4@[1.2.3.4] (@)" )
    assertIsTrue( "ip4.with.ip4.in.comment5@[1.2.3.4] (@.)" )

    assertIsFalse( "ip4.with.hex.numbers@[AB.CD.EF.EA]" )
    assertIsFalse( "ip4.with.hex.number.overflow@[AB.CD.EF.FF1]" )

    assertIsFalse( "ip4.with.double.brackets@[1.2.3.4][5.6.7.8]" )
    assertIsFalse( "ip4.missing.at.sign[1.2.3.4]" )
    assertIsFalse( "ip4.missing.the.start.bracket@]" )
    assertIsFalse( "ip4.missing.the.end.bracket@[" )
    assertIsFalse( "ip4.missing.the.start.bracket@1.2.3.4]" )
    assertIsFalse( "ip4.missing.the.end.bracket@[1.2.3.4" )

    assertIsFalse( "ip4.missing.numbers.and.the.start.bracket@...]" )
    assertIsFalse( "ip4.missing.numbers.and.the.end.bracket@[..." )
    assertIsFalse( "ip4.missplaced.start.bracket1[@1.2.3.4]" )

    assertIsFalse( "ip4.missing.the.first.number@[.2.3.4]" )
    assertIsFalse( "ip4.missing.the.last.number@[1.2.3.]" )
    assertIsFalse( "ip4.last.number.is.space@[1.2.3. ]" )

    assertIsFalse( "ip4.with.only.one.numberABC.DEF@[1]" )
    assertIsFalse( "ip4.with.only.two.numbers@[1.2]" )
    assertIsFalse( "ip4.with.only.three.numbers@[1.2.3]" )
    assertIsFalse( "ip4.with.five.numbers@[1.2.3.4.5]" )
    assertIsFalse( "ip4.with.six.numbers@[1.2.3.4.5.6]" )
    assertIsFalse( "ip4.with.byte.overflow1@[1.2.3.256]" )
    assertIsFalse( "ip4.with.byte.overflow2@[1.2.3.1000]" )
    assertIsFalse( "ip4.with.to.many.leading.zeros@[0001.000002.000003.00000004]" )
    assertIsTrue( "ip4.with.two.leading.zeros@[001.002.003.004]" )
    assertIsTrue( "ip4.zero@[0.0.0.0]" )
    assertIsTrue( "ip4.correct1@[1.2.3.4]" )
    assertIsTrue( "ip4.correct2@[255.255.255.255]" )
    assertIsTrue( "\"ip4.local.part.as.string\"@[127.0.0.1]" )
    assertIsTrue( "\"    \"@[1.2.3.4]" )
    assertIsFalse( "ip4.no.email.adress[1.2.3.4]  but.with.space[1.2.3.4]" )

    assertIsFalse( "ip4.with.negative.number1@[-1.2.3.4]" )
    assertIsFalse( "ip4.with.negative.number2@[1.-2.3.4]" )
    assertIsFalse( "ip4.with.negative.number3@[1.2.-3.4]" )
    assertIsFalse( "ip4.with.negative.number4@[1.2.3.-4]" )

    assertIsFalse( "ip4.with.only.empty.brackets@[]" )
    assertIsFalse( "ip4.with.three.empty.brackets@[][][]" )
    assertIsFalse( "ip4.with.wrong.characters.in.brackets@[{][})][}][}\\\"]" )
    assertIsFalse( "ip4.in.false.brackets@{1.2.3.4}" )

    assertIsFalse( "ip4.with.only.one.dot.in.brackets@[.]" )
    assertIsFalse( "ip4.with.only.double.dot.in.brackets@[..]" )
    assertIsFalse( "ip4.with.only.triple.dot.in.brackets@[...]" )
    assertIsFalse( "ip4.with.only.four.dots.in.brackets@[....]" )
    assertIsFalse( "ip4.with.false.consecutive.points@[1.2...3.4]" )

    assertIsFalse( "ip4.with.dot.between.numbers@[123.14.5.178.90]" )
    assertIsFalse( "ip4.with.dot.before.point@[123.145..178.90]" )
    assertIsFalse( "ip4.with.dot.after.point@[123.145..178.90]" )
    assertIsFalse( "ip4.with.dot.before.start.bracket@.[123.145.178.90]" )
    assertIsFalse( "ip4.with.dot.after.start.bracket@[.123.145.178.90]" )
    assertIsFalse( "ip4.with.dot.before.end.bracket@[123.145.178.90.]" )
    assertIsFalse( "ip4.with.dot.after.end.bracket@[123.145.178.90]." )

    assertIsFalse( "ip4.with.double.dot.between.numbers@[123.14..5.178.90]" )
    assertIsFalse( "ip4.with.double.dot.before.point@[123.145...178.90]" )
    assertIsFalse( "ip4.with.double.dot.after.point@[123.145...178.90]" )
    assertIsFalse( "ip4.with.double.dot.before.start.bracket@..[123.145.178.90]" )
    assertIsFalse( "ip4.with.double.dot.after.start.bracket@[..123.145.178.90]" )
    assertIsFalse( "ip4.with.double.dot.before.end.bracket@[123.145.178.90..]" )
    assertIsFalse( "ip4.with.double.dot.after.end.bracket@[123.145.178.90].." )

    assertIsFalse( "ip4.with.amp.between.numbers@[123.14&5.178.90]" )
    assertIsFalse( "ip4.with.amp.before.point@[123.145&.178.90]" )
    assertIsFalse( "ip4.with.amp.after.point@[123.145.&178.90]" )
    assertIsFalse( "ip4.with.amp.before.start.bracket@&[123.145.178.90]" )
    assertIsFalse( "ip4.with.amp.after.start.bracket@[&123.145.178.90]" )
    assertIsFalse( "ip4.with.amp.before.end.bracket@[123.145.178.90&]" )
    assertIsFalse( "ip4.with.amp.after.end.bracket@[123.145.178.90]&" )

    assertIsFalse( "ip4.with.asterisk.between.numbers@[123.14*5.178.90]" )
    assertIsFalse( "ip4.with.asterisk.before.point@[123.145*.178.90]" )
    assertIsFalse( "ip4.with.asterisk.after.point@[123.145.*178.90]" )
    assertIsFalse( "ip4.with.asterisk.before.start.bracket@*[123.145.178.90]" )
    assertIsFalse( "ip4.with.asterisk.after.start.bracket@[*123.145.178.90]" )
    assertIsFalse( "ip4.with.asterisk.before.end.bracket@[123.145.178.90*]" )
    assertIsFalse( "ip4.with.asterisk.after.end.bracket@[123.145.178.90]*" )

    assertIsFalse( "ip4.with.underscore.between.numbers@[123.14_5.178.90]" )
    assertIsFalse( "ip4.with.underscore.before.point@[123.145_.178.90]" )
    assertIsFalse( "ip4.with.underscore.after.point@[123.145._178.90]" )
    assertIsFalse( "ip4.with.underscore.before.start.bracket@_[123.145.178.90]" )
    assertIsFalse( "ip4.with.underscore.after.start.bracket@[_123.145.178.90]" )
    assertIsFalse( "ip4.with.underscore.before.end.bracket@[123.145.178.90_]" )
    assertIsFalse( "ip4.with.underscore.after.end.bracket@[123.145.178.90]_" )

    assertIsFalse( "ip4.with.dollar.between.numbers@[123.14$5.178.90]" )
    assertIsFalse( "ip4.with.dollar.before.point@[123.145$.178.90]" )
    assertIsFalse( "ip4.with.dollar.after.point@[123.145.$178.90]" )
    assertIsFalse( "ip4.with.dollar.before.start.bracket@$[123.145.178.90]" )
    assertIsFalse( "ip4.with.dollar.after.start.bracket@[$123.145.178.90]" )
    assertIsFalse( "ip4.with.dollar.before.end.bracket@[123.145.178.90$]" )
    assertIsFalse( "ip4.with.dollar.after.end.bracket@[123.145.178.90]$" )

    assertIsFalse( "ip4.with.equality.between.numbers@[123.14=5.178.90]" )
    assertIsFalse( "ip4.with.equality.before.point@[123.145=.178.90]" )
    assertIsFalse( "ip4.with.equality.after.point@[123.145.=178.90]" )
    assertIsFalse( "ip4.with.equality.before.start.bracket@=[123.145.178.90]" )
    assertIsFalse( "ip4.with.equality.after.start.bracket@[=123.145.178.90]" )
    assertIsFalse( "ip4.with.equality.before.end.bracket@[123.145.178.90=]" )
    assertIsFalse( "ip4.with.equality.after.end.bracket@[123.145.178.90]=" )

    assertIsFalse( "ip4.with.exclamation.between.numbers@[123.14!5.178.90]" )
    assertIsFalse( "ip4.with.exclamation.before.point@[123.145!.178.90]" )
    assertIsFalse( "ip4.with.exclamation.after.point@[123.145.!178.90]" )
    assertIsFalse( "ip4.with.exclamation.before.start.bracket@![123.145.178.90]" )
    assertIsFalse( "ip4.with.exclamation.after.start.bracket@[!123.145.178.90]" )
    assertIsFalse( "ip4.with.exclamation.before.end.bracket@[123.145.178.90!]" )
    assertIsFalse( "ip4.with.exclamation.after.end.bracket@[123.145.178.90]!" )

    assertIsFalse( "ip4.with.question.between.numbers@[123.14?5.178.90]" )
    assertIsFalse( "ip4.with.question.before.point@[123.145?.178.90]" )
    assertIsFalse( "ip4.with.question.after.point@[123.145.?178.90]" )
    assertIsFalse( "ip4.with.question.before.start.bracket@?[123.145.178.90]" )
    assertIsFalse( "ip4.with.question.after.start.bracket@[?123.145.178.90]" )
    assertIsFalse( "ip4.with.question.before.end.bracket@[123.145.178.90?]" )
    assertIsFalse( "ip4.with.question.after.end.bracket@[123.145.178.90]?" )

    assertIsFalse( "ip4.with.grave-accent.between.numbers@[123.14`5.178.90]" )
    assertIsFalse( "ip4.with.grave-accent.before.point@[123.145`.178.90]" )
    assertIsFalse( "ip4.with.grave-accent.after.point@[123.145.`178.90]" )
    assertIsFalse( "ip4.with.grave-accent.before.start.bracket@`[123.145.178.90]" )
    assertIsFalse( "ip4.with.grave-accent.after.start.bracket@[`123.145.178.90]" )
    assertIsFalse( "ip4.with.grave-accent.before.end.bracket@[123.145.178.90`]" )
    assertIsFalse( "ip4.with.grave-accent.after.end.bracket@[123.145.178.90]`" )

    assertIsFalse( "ip4.with.hash.between.numbers@[123.14#5.178.90]" )
    assertIsFalse( "ip4.with.hash.before.point@[123.145#.178.90]" )
    assertIsFalse( "ip4.with.hash.after.point@[123.145.#178.90]" )
    assertIsFalse( "ip4.with.hash.before.start.bracket@#[123.145.178.90]" )
    assertIsFalse( "ip4.with.hash.after.start.bracket@[#123.145.178.90]" )
    assertIsFalse( "ip4.with.hash.before.end.bracket@[123.145.178.90#]" )
    assertIsFalse( "ip4.with.hash.after.end.bracket@[123.145.178.90]#" )

    assertIsFalse( "ip4.with.percentage.between.numbers@[123.14%5.178.90]" )
    assertIsFalse( "ip4.with.percentage.before.point@[123.145%.178.90]" )
    assertIsFalse( "ip4.with.percentage.after.point@[123.145.%178.90]" )
    assertIsFalse( "ip4.with.percentage.before.start.bracket@%[123.145.178.90]" )
    assertIsFalse( "ip4.with.percentage.after.start.bracket@[%123.145.178.90]" )
    assertIsFalse( "ip4.with.percentage.before.end.bracket@[123.145.178.90%]" )
    assertIsFalse( "ip4.with.percentage.after.end.bracket@[123.145.178.90]%" )

    assertIsFalse( "ip4.with.pipe.between.numbers@[123.14|5.178.90]" )
    assertIsFalse( "ip4.with.pipe.before.point@[123.145|.178.90]" )
    assertIsFalse( "ip4.with.pipe.after.point@[123.145.|178.90]" )
    assertIsFalse( "ip4.with.pipe.before.start.bracket@|[123.145.178.90]" )
    assertIsFalse( "ip4.with.pipe.after.start.bracket@[|123.145.178.90]" )
    assertIsFalse( "ip4.with.pipe.before.end.bracket@[123.145.178.90|]" )
    assertIsFalse( "ip4.with.pipe.after.end.bracket@[123.145.178.90]|" )

    assertIsFalse( "ip4.with.plus.between.numbers@[123.14+5.178.90]" )
    assertIsFalse( "ip4.with.plus.before.point@[123.145+.178.90]" )
    assertIsFalse( "ip4.with.plus.after.point@[123.145.+178.90]" )
    assertIsFalse( "ip4.with.plus.before.start.bracket@+[123.145.178.90]" )
    assertIsFalse( "ip4.with.plus.after.start.bracket@[+123.145.178.90]" )
    assertIsFalse( "ip4.with.plus.before.end.bracket@[123.145.178.90+]" )
    assertIsFalse( "ip4.with.plus.after.end.bracket@[123.145.178.90]+" )

    assertIsFalse( "ip4.with.leftbracket.between.numbers@[123.14{5.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.point@[123.145{.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.after.point@[123.145.{178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.start.bracket@{[123.145.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.after.start.bracket@[{123.145.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.end.bracket@[123.145.178.90{]" )
    assertIsFalse( "ip4.with.leftbracket.after.end.bracket@[123.145.178.90]{" )

    assertIsFalse( "ip4.with.rightbracket.between.numbers@[123.14}5.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.point@[123.145}.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.after.point@[123.145.}178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.start.bracket@}[123.145.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.after.start.bracket@[}123.145.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.end.bracket@[123.145.178.90}]" )
    assertIsFalse( "ip4.with.rightbracket.after.end.bracket@[123.145.178.90]}" )

    assertIsFalse( "ip4.with.leftbracket.between.numbers@[123.14(5.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.point@[123.145(.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.after.point@[123.145.(178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.start.bracket@([123.145.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.after.start.bracket@[(123.145.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.end.bracket@[123.145.178.90(]" )
    assertIsFalse( "ip4.with.leftbracket.after.end.bracket@[123.145.178.90](" )

    assertIsFalse( "ip4.with.rightbracket.between.numbers@[123.14)5.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.point@[123.145).178.90]" )
    assertIsFalse( "ip4.with.rightbracket.after.point@[123.145.)178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.start.bracket@)[123.145.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.after.start.bracket@[)123.145.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.end.bracket@[123.145.178.90)]" )
    assertIsFalse( "ip4.with.rightbracket.after.end.bracket@[123.145.178.90])" )

    assertIsFalse( "ip4.with.leftbracket.between.numbers@[123.14[5.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.point@[123.145[.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.after.point@[123.145.[178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.start.bracket@[[123.145.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.after.start.bracket@[[123.145.178.90]" )
    assertIsFalse( "ip4.with.leftbracket.before.end.bracket@[123.145.178.90[]" )
    assertIsFalse( "ip4.with.leftbracket.after.end.bracket@[123.145.178.90][" )

    assertIsFalse( "ip4.with.rightbracket.between.numbers@[123.14]5.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.point@[123.145].178.90]" )
    assertIsFalse( "ip4.with.rightbracket.after.point@[123.145.]178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.start.bracket@][123.145.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.after.start.bracket@[]123.145.178.90]" )
    assertIsFalse( "ip4.with.rightbracket.before.end.bracket@[123.145.178.90]]" )
    assertIsFalse( "ip4.with.rightbracket.after.end.bracket@[123.145.178.90]]" )

    assertIsFalse( "ip4.with.empty.bracket.between.numbers@[123.14()5.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.point@[123.145().178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.after.point@[123.145.()178.90]" )
    assertIsTrue( "ip4.with.empty.bracket.before.start.bracket@()[123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.after.start.bracket@[()123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.end.bracket@[123.145.178.90()]" )
    assertIsTrue( "ip4.with.empty.bracket.after.end.bracket@[123.145.178.90]()" )


    assertIsFalse( "ip4.with.empty.bracket.between.numbers@[123.14[]5.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.point@[123.145[].178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.after.point@[123.145.[]178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.start.bracket@[][123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.after.start.bracket@[[]123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.end.bracket@[123.145.178.90[]]" )
    assertIsFalse( "ip4.with.empty.bracket.after.end.bracket@[123.145.178.90][]" )

    assertIsFalse( "ip4.with.empty.bracket.between.numbers@[123.14<>5.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.point@[123.145<>.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.after.point@[123.145.<>178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.start.bracket@<>[123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.after.start.bracket@[<>123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.bracket.before.end.bracket@[123.145.178.90<>]" )
    assertIsFalse( "ip4.with.empty.bracket.after.end.bracket@[123.145.178.90]<>" )

    assertIsFalse( "ip4.with.false.bracket1.between.numbers@[123.14)(5.178.90]" )
    assertIsFalse( "ip4.with.false.bracket1.before.point@[123.145)(.178.90]" )
    assertIsFalse( "ip4.with.false.bracket1.after.point@[123.145.)(178.90]" )
    assertIsFalse( "ip4.with.false.bracket1.before.start.bracket@)([123.145.178.90]" )
    assertIsFalse( "ip4.with.false.bracket1.after.start.bracket@[)(123.145.178.90]" )
    assertIsFalse( "ip4.with.false.bracket1.before.end.bracket@[123.145.178.90)(]" )
    assertIsFalse( "ip4.with.false.bracket1.after.end.bracket@[123.145.178.90])(" )

    assertIsFalse( "ip4.with.false.bracket2.between.numbers@[123.14}{5.178.90]" )
    assertIsFalse( "ip4.with.false.bracket2.before.point@[123.145}{.178.90]" )
    assertIsFalse( "ip4.with.false.bracket2.after.point@[123.145.}{178.90]" )
    assertIsFalse( "ip4.with.false.bracket2.before.start.bracket@}{[123.145.178.90]" )
    assertIsFalse( "ip4.with.false.bracket2.after.start.bracket@[}{123.145.178.90]" )
    assertIsFalse( "ip4.with.false.bracket2.before.end.bracket@[123.145.178.90}{]" )
    assertIsFalse( "ip4.with.false.bracket2.after.end.bracket@[123.145.178.90]}{" )

    assertIsFalse( "ip4.with.false.bracket4.between.numbers@[123.14><5.178.90]" )
    assertIsFalse( "ip4.with.false.bracket4.before.point@[123.145><.178.90]" )
    assertIsFalse( "ip4.with.false.bracket4.after.point@[123.145.><178.90]" )
    assertIsFalse( "ip4.with.false.bracket4.before.start.bracket@><[123.145.178.90]" )
    assertIsFalse( "ip4.with.false.bracket4.after.start.bracket@[><123.145.178.90]" )
    assertIsFalse( "ip4.with.false.bracket4.before.end.bracket@[123.145.178.90><]" )
    assertIsFalse( "ip4.with.false.bracket4.after.end.bracket@[123.145.178.90]><" )

    assertIsFalse( "ip4.with.lower.than.between.numbers@[123.14<5.178.90]" )
    assertIsFalse( "ip4.with.lower.than.before.point@[123.145<.178.90]" )
    assertIsFalse( "ip4.with.lower.than.after.point@[123.145.<178.90]" )
    assertIsFalse( "ip4.with.lower.than.before.start.bracket@<[123.145.178.90]" )
    assertIsFalse( "ip4.with.lower.than.after.start.bracket@[<123.145.178.90]" )
    assertIsFalse( "ip4.with.lower.than.before.end.bracket@[123.145.178.90<]" )
    assertIsFalse( "ip4.with.lower.than.after.end.bracket@[123.145.178.90]<" )

    assertIsFalse( "ip4.with.greater.than.between.numbers@[123.14>5.178.90]" )
    assertIsFalse( "ip4.with.greater.than.before.point@[123.145>.178.90]" )
    assertIsFalse( "ip4.with.greater.than.after.point@[123.145.>178.90]" )
    assertIsFalse( "ip4.with.greater.than.before.start.bracket@>[123.145.178.90]" )
    assertIsFalse( "ip4.with.greater.than.after.start.bracket@[>123.145.178.90]" )
    assertIsFalse( "ip4.with.greater.than.before.end.bracket@[123.145.178.90>]" )
    assertIsFalse( "ip4.with.greater.than.after.end.bracket@[123.145.178.90]>" )

    assertIsFalse( "ip4.with.tilde.between.numbers@[123.14~5.178.90]" )
    assertIsFalse( "ip4.with.tilde.before.point@[123.145~.178.90]" )
    assertIsFalse( "ip4.with.tilde.after.point@[123.145.~178.90]" )
    assertIsFalse( "ip4.with.tilde.before.start.bracket@~[123.145.178.90]" )
    assertIsFalse( "ip4.with.tilde.after.start.bracket@[~123.145.178.90]" )
    assertIsFalse( "ip4.with.tilde.before.end.bracket@[123.145.178.90~]" )
    assertIsFalse( "ip4.with.tilde.after.end.bracket@[123.145.178.90]~" )

    assertIsFalse( "ip4.with.xor.between.numbers@[123.14^5.178.90]" )
    assertIsFalse( "ip4.with.xor.before.point@[123.145^.178.90]" )
    assertIsFalse( "ip4.with.xor.after.point@[123.145.^178.90]" )
    assertIsFalse( "ip4.with.xor.before.start.bracket@^[123.145.178.90]" )
    assertIsFalse( "ip4.with.xor.after.start.bracket@[^123.145.178.90]" )
    assertIsFalse( "ip4.with.xor.before.end.bracket@[123.145.178.90^]" )
    assertIsFalse( "ip4.with.xor.after.end.bracket@[123.145.178.90]^" )

    assertIsFalse( "ip4.with.colon.between.numbers@[123.14:5.178.90]" )
    assertIsFalse( "ip4.with.colon.before.point@[123.145:.178.90]" )
    assertIsFalse( "ip4.with.colon.after.point@[123.145.:178.90]" )
    assertIsFalse( "ip4.with.colon.before.start.bracket@:[123.145.178.90]" )
    assertIsFalse( "ip4.with.colon.after.start.bracket@[:123.145.178.90]" )
    assertIsFalse( "ip4.with.colon.before.end.bracket@[123.145.178.90:]" )
    assertIsFalse( "ip4.with.colon.after.end.bracket@[123.145.178.90]:" )

    assertIsFalse( "ip4.with.space.between.numbers@[123.14 5.178.90]" )
    assertIsFalse( "ip4.with.space.before.point@[123.145 .178.90]" )
    assertIsFalse( "ip4.with.space.after.point@[123.145. 178.90]" )
    assertIsFalse( "ip4.with.space.before.start.bracket@ [123.145.178.90]" )
    assertIsFalse( "ip4.with.space.after.start.bracket@[ 123.145.178.90]" )
    assertIsFalse( "ip4.with.space.before.end.bracket@[123.145.178.90 ]" )
    assertIsFalse( "ip4.with.space.after.end.bracket@[123.145.178.90] " )

    assertIsFalse( "ip4.with.comma.between.numbers@[123.14,5.178.90]" )
    assertIsFalse( "ip4.with.comma.before.point@[123.145,.178.90]" )
    assertIsFalse( "ip4.with.comma.after.point@[123.145.,178.90]" )
    assertIsFalse( "ip4.with.comma.before.start.bracket@,[123.145.178.90]" )
    assertIsFalse( "ip4.with.comma.after.start.bracket@[,123.145.178.90]" )
    assertIsFalse( "ip4.with.comma.before.end.bracket@[123.145.178.90,]" )
    assertIsFalse( "ip4.with.comma.after.end.bracket@[123.145.178.90]," )

    assertIsFalse( "ip4.with.at.between.numbers@[123.14@5.178.90]" )
    assertIsFalse( "ip4.with.at.before.point@[123.145@.178.90]" )
    assertIsFalse( "ip4.with.at.after.point@[123.145.@178.90]" )
    assertIsFalse( "ip4.with.at.before.start.bracket@@[123.145.178.90]" )
    assertIsFalse( "ip4.with.at.after.start.bracket@[@123.145.178.90]" )
    assertIsFalse( "ip4.with.at.before.end.bracket@[123.145.178.90@]" )
    assertIsFalse( "ip4.with.at.after.end.bracket@[123.145.178.90]@" )

    assertIsFalse( "ip4.with.paragraph.between.numbers@[123.14§5.178.90]" )
    assertIsFalse( "ip4.with.paragraph.before.point@[123.145§.178.90]" )
    assertIsFalse( "ip4.with.paragraph.after.point@[123.145.§178.90]" )
    assertIsFalse( "ip4.with.paragraph.before.start.bracket@§[123.145.178.90]" )
    assertIsFalse( "ip4.with.paragraph.after.start.bracket@[§123.145.178.90]" )
    assertIsFalse( "ip4.with.paragraph.before.end.bracket@[123.145.178.90§]" )
    assertIsFalse( "ip4.with.paragraph.after.end.bracket@[123.145.178.90]§" )

    assertIsFalse( "ip4.with.double.quote.between.numbers@[123.14'5.178.90]" )
    assertIsFalse( "ip4.with.double.quote.before.point@[123.145'.178.90]" )
    assertIsFalse( "ip4.with.double.quote.after.point@[123.145.'178.90]" )
    assertIsFalse( "ip4.with.double.quote.before.start.bracket@'[123.145.178.90]" )
    assertIsFalse( "ip4.with.double.quote.after.start.bracket@['123.145.178.90]" )
    assertIsFalse( "ip4.with.double.quote.before.end.bracket@[123.145.178.90']" )
    assertIsFalse( "ip4.with.double.quote.after.end.bracket@[123.145.178.90]'" )

    assertIsFalse( "ip4.with.forward.slash.between.numbers@[123.14/5.178.90]" )
    assertIsFalse( "ip4.with.forward.slash.before.point@[123.145/.178.90]" )
    assertIsFalse( "ip4.with.forward.slash.after.point@[123.145./178.90]" )
    assertIsFalse( "ip4.with.forward.slash.before.start.bracket@/[123.145.178.90]" )
    assertIsFalse( "ip4.with.forward.slash.after.start.bracket@[/123.145.178.90]" )
    assertIsFalse( "ip4.with.forward.slash.before.end.bracket@[123.145.178.90/]" )
    assertIsFalse( "ip4.with.forward.slash.after.end.bracket@[123.145.178.90]/" )

    assertIsFalse( "ip4.with.hyphen.between.numbers@[123.14-5.178.90]" )
    assertIsFalse( "ip4.with.hyphen.before.point@[123.145-.178.90]" )
    assertIsFalse( "ip4.with.hyphen.after.point@[123.145.-178.90]" )
    assertIsFalse( "ip4.with.hyphen.before.start.bracket@-[123.145.178.90]" )
    assertIsFalse( "ip4.with.hyphen.after.start.bracket@[-123.145.178.90]" )
    assertIsFalse( "ip4.with.hyphen.before.end.bracket@[123.145.178.90-]" )
    assertIsFalse( "ip4.with.hyphen.after.end.bracket@[123.145.178.90]-" )

    assertIsFalse( "ip4.with.empty.string1.between.numbers@[123.14\"\"5.178.90]" )
    assertIsFalse( "ip4.with.empty.string1.before.point@[123.145\"\".178.90]" )
    assertIsFalse( "ip4.with.empty.string1.after.point@[123.145.\"\"178.90]" )
    assertIsFalse( "ip4.with.empty.string1.before.start.bracket@\"\"[123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.string1.after.start.bracket@[\"\"123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.string1.before.end.bracket@[123.145.178.90\"\"]" )
    assertIsFalse( "ip4.with.empty.string1.after.end.bracket@[123.145.178.90]\"\"" )

    assertIsFalse( "ip4.with.empty.string2.between.numbers@[123.14a\"\"b5.178.90]" )
    assertIsFalse( "ip4.with.empty.string2.before.point@[123.145a\"\"b.178.90]" )
    assertIsFalse( "ip4.with.empty.string2.after.point@[123.145.a\"\"b178.90]" )
    assertIsFalse( "ip4.with.empty.string2.before.start.bracket@a\"\"b[123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.string2.after.start.bracket@[a\"\"b123.145.178.90]" )
    assertIsFalse( "ip4.with.empty.string2.before.end.bracket@[123.145.178.90a\"\"b]" )
    assertIsFalse( "ip4.with.empty.string2.after.end.bracket@[123.145.178.90]a\"\"b" )

    assertIsFalse( "ip4.with.double.empty.string1.between.numbers@[123.14\"\"\"\"5.178.90]" )
    assertIsFalse( "ip4.with.double.empty.string1.before.point@[123.145\"\"\"\".178.90]" )
    assertIsFalse( "ip4.with.double.empty.string1.after.point@[123.145.\"\"\"\"178.90]" )
    assertIsFalse( "ip4.with.double.empty.string1.before.start.bracket@\"\"\"\"[123.145.178.90]" )
    assertIsFalse( "ip4.with.double.empty.string1.after.start.bracket@[\"\"\"\"123.145.178.90]" )
    assertIsFalse( "ip4.with.double.empty.string1.before.end.bracket@[123.145.178.90\"\"\"\"]" )
    assertIsFalse( "ip4.with.double.empty.string1.after.end.bracket@[123.145.178.90]\"\"\"\"" )

    assertIsFalse( "ip4.with.double.empty.string2.between.numbers@[123.14\"\".\"\"5.178.90]" )
    assertIsFalse( "ip4.with.double.empty.string2.before.point@[123.145\"\".\"\".178.90]" )
    assertIsFalse( "ip4.with.double.empty.string2.after.point@[123.145.\"\".\"\"178.90]" )
    assertIsFalse( "ip4.with.double.empty.string2.before.start.bracket@\"\".\"\"[123.145.178.90]" )
    assertIsFalse( "ip4.with.double.empty.string2.after.start.bracket@[\"\".\"\"123.145.178.90]" )
    assertIsFalse( "ip4.with.double.empty.string2.before.end.bracket@[123.145.178.90\"\".\"\"]" )
    assertIsFalse( "ip4.with.double.empty.string2.after.end.bracket@[123.145.178.90]\"\".\"\"" )

    assertIsFalse( "ip4.with.number0.between.numbers@[123.1405.178.90]" )
    assertIsFalse( "ip4.with.number0.before.point@[123.1450.178.90]" )
    assertIsFalse( "ip4.with.number0.after.point@[123.145.0178.90]" )
    assertIsFalse( "ip4.with.number0.before.start.bracket@0[123.145.178.90]" )
    assertIsFalse( "ip4.with.number0.after.start.bracket@[0123.145.178.90]" )
    assertIsFalse( "ip4.with.number0.before.end.bracket@[123.145.178.900]" )
    assertIsFalse( "ip4.with.number0.after.end.bracket@[123.145.178.90]0" )

    assertIsFalse( "ip4.with.number9.between.numbers@[123.1495.178.90]" )
    assertIsFalse( "ip4.with.number9.before.point@[123.1459.178.90]" )
    assertIsFalse( "ip4.with.number9.after.point@[123.145.9178.90]" )
    assertIsFalse( "ip4.with.number9.before.start.bracket@9[123.145.178.90]" )
    assertIsFalse( "ip4.with.number9.after.start.bracket@[9123.145.178.90]" )
    assertIsFalse( "ip4.with.number9.before.end.bracket@[123.145.178.909]" )
    assertIsFalse( "ip4.with.number9.after.end.bracket@[123.145.178.90]9" )

    assertIsFalse( "ip4.with.numbers.between.numbers@[123.1401234567895.178.90]" )
    assertIsFalse( "ip4.with.numbers.before.point@[123.1450123456789.178.90]" )
    assertIsFalse( "ip4.with.numbers.after.point@[123.145.0123456789178.90]" )
    assertIsFalse( "ip4.with.numbers.before.start.bracket@0123456789[123.145.178.90]" )
    assertIsFalse( "ip4.with.numbers.after.start.bracket@[0123456789123.145.178.90]" )
    assertIsFalse( "ip4.with.numbers.before.end.bracket@[123.145.178.900123456789]" )
    assertIsFalse( "ip4.with.numbers.after.end.bracket@[123.145.178.90]0123456789" )

    assertIsFalse( "ip4.with.byte.overflow.between.numbers@[123.149995.178.90]" )
    assertIsFalse( "ip4.with.byte.overflow.before.point@[123.145999.178.90]" )
    assertIsFalse( "ip4.with.byte.overflow.after.point@[123.145.999178.90]" )
    assertIsFalse( "ip4.with.byte.overflow.before.start.bracket@999[123.145.178.90]" )
    assertIsFalse( "ip4.with.byte.overflow.after.start.bracket@[999123.145.178.90]" )
    assertIsFalse( "ip4.with.byte.overflow.before.end.bracket@[123.145.178.90999]" )
    assertIsFalse( "ip4.with.byte.overflow.after.end.bracket@[123.145.178.90]999" )

    assertIsFalse( "ip4.with.no.hex.number.between.numbers@[123.14xyz5.178.90]" )
    assertIsFalse( "ip4.with.no.hex.number.before.point@[123.145xyz.178.90]" )
    assertIsFalse( "ip4.with.no.hex.number.after.point@[123.145.xyz178.90]" )
    assertIsFalse( "ip4.with.no.hex.number.before.start.bracket@xyz[123.145.178.90]" )
    assertIsFalse( "ip4.with.no.hex.number.after.start.bracket@[xyz123.145.178.90]" )
    assertIsFalse( "ip4.with.no.hex.number.before.end.bracket@[123.145.178.90xyz]" )
    assertIsFalse( "ip4.with.no.hex.number.after.end.bracket@[123.145.178.90]xyz" )

    assertIsFalse( "ip4.with.slash.between.numbers@[123.14\\5.178.90]" )
    assertIsFalse( "ip4.with.slash.before.point@[123.145\\.178.90]" )
    assertIsFalse( "ip4.with.slash.after.point@[123.145.\\178.90]" )
    assertIsFalse( "ip4.with.slash.before.start.bracket@\\[123.145.178.90]" )
    assertIsFalse( "ip4.with.slash.after.start.bracket@[\\123.145.178.90]" )
    assertIsFalse( "ip4.with.slash.before.end.bracket@[123.145.178.90\\]" )
    assertIsFalse( "ip4.with.slash.after.end.bracket@[123.145.178.90]\\" )

    assertIsFalse( "ip4.with.string.between.numbers@[123.14\"str\"5.178.90]" )
    assertIsFalse( "ip4.with.string.before.point@[123.145\"str\".178.90]" )
    assertIsFalse( "ip4.with.string.after.point@[123.145.\"str\"178.90]" )
    assertIsFalse( "ip4.with.string.before.start.bracket@\"str\"[123.145.178.90]" )
    assertIsFalse( "ip4.with.string.after.start.bracket@[\"str\"123.145.178.90]" )
    assertIsFalse( "ip4.with.string.before.end.bracket@[123.145.178.90\"str\"]" )
    assertIsFalse( "ip4.with.string.after.end.bracket@[123.145.178.90]\"str\"" )

    assertIsFalse( "ip4.with.comment.between.numbers@[123.14(comment)5.178.90]" )
    assertIsFalse( "ip4.with.comment.before.point@[123.145(comment).178.90]" )
    assertIsFalse( "ip4.with.comment.after.point@[123.145.(comment)178.90]" )
    assertIsTrue( "ip4.with.comment.before.start.bracket@(comment)[123.145.178.90]" )
    assertIsFalse( "ip4.with.comment.after.start.bracket@[(comment)123.145.178.90]" )
    assertIsFalse( "ip4.with.comment.before.end.bracket@[123.145.178.90(comment)]" )
    assertIsTrue( "ip4.with.comment.after.end.bracket@[123.145.178.90](comment)" )

    assertIsTrue( "email@[123.123.123.123]" )
    assertIsFalse( "email@111.222.333" )
    assertIsFalse( "email@111.222.333.256" )
    assertIsFalse( "email@[123.123.123.123" )
    assertIsFalse( "email@[123.123.123].123" )
    assertIsFalse( "email@123.123.123.123]" )
    assertIsFalse( "email@123.123.[123.123]" )

    assertIsFalse( "ab@988.120.150.10" )
    assertIsFalse( "ab@120.256.256.120" )
    assertIsFalse( "ab@120.25.1111.120" )
    assertIsFalse( "ab@[188.120.150.10" )
    assertIsFalse( "ab@188.120.150.10]" )
    assertIsFalse( "ab@[188.120.150.10].com" )
    assertIsTrue( "ab@188.120.150.10" )
    assertIsTrue( "ab@1.0.0.10" )
    assertIsTrue( "ab@120.25.254.120" )
    assertIsTrue( "ab@01.120.150.1" )
    assertIsTrue( "ab@88.120.150.021" )
    assertIsTrue( "ab@88.120.150.01" )
    assertIsTrue( "email@123.123.123.123" )    

def runTestIP6():
    wlHeadline( "IP V6" )

    assertIsTrue( "ABC.DEF@[IPv6:2001:db8::1]" )
    assertIsFalse( "ABC.DEF@[IP" )
    assertIsFalse( "ABC.DEF@[IPv6]" )

    assertIsFalse( "ABC.DEF@[IPv6:]" )
    assertIsFalse( "ABC.DEF@[IPv6:" )
    assertIsFalse( "ABC.DEF@[IPv6::]" )
    assertIsFalse( "ABC.DEF@[IPv6::" )
    assertIsFalse( "ABC.DEF@[IPv6:::::...]" )
    assertIsFalse( "ABC.DEF@[IPv6:::::..." )
    assertIsFalse( "ABC.DEF@[IPv6::::::]" )
    assertIsFalse( "ABC.DEF@[IPv6:1]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3:4]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3:4:5:]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3:4:5::]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3:4:5:6]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3:4:5:6:7]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3:4:5:6:7" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3:4:5:6:7:8]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3:4:5:6:7:8:9]" )
    assertIsFalse( "ABC.DEF@[IPv4:1:2:3:4]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3:4::]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3:4:::]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2::4:5::]" )
    assertIsFalse( "ABC.DEF@[I127.0.0.1]" )
    assertIsFalse( "ABC.DEF@[D127.0.0.1]" )
    assertIsFalse( "ABC.DEF@[iPv6:2001:db8::1]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3::5:6:7:8]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3::5::7:8]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3:4:5:Z]" )
    assertIsFalse( "ABC.DEF@[IPv6:12:34]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3:4:5:6" )
    assertIsFalse( "ABC.DEF@[IPv6:12345:6:7:8:9]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3:::6:7:8]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3]:4:5:6:7]" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2](:3:4:5:6:7])" )
    assertIsFalse( "ABC.DEF@[IPv6:1:2:3](:4:5:6:7])" )
    assertIsFalse( "ABC.DEF@([IPv6:1:2:3:4:5:6])" )

    assertIsFalse( "ABC.DEF@[IPv6:1:-2:3:4:5:]" )

    assertIsFalse( "ip.v6.with.dot@[IPv6:1:2.2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dot@[IPv6:1:22.:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dot@[IPv6:1:22:.3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dot@[IPv6:1:22:3:4:5:6:7.]" )
    assertIsFalse( "ip.v6.with.dot@[IPv6:1:22:3:4:5:6:7]." )
    assertIsFalse( "ip.v6.with.dot@.[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dot@[.IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.double.dot@[IPv6:1:2..2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.dot@[IPv6:1:22..:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.dot@[IPv6:1:22:..3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.dot@[IPv6:1:22:3:4:5:6:7..]" )
    assertIsFalse( "ip.v6.with.double.dot@[IPv6:1:22:3:4:5:6:7].." )
    assertIsFalse( "ip.v6.with.double.dot@..[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.dot@[..IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.amp@[IPv6:1:2&2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.amp@[IPv6:1:22&:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.amp@[IPv6:1:22:&3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.amp@[IPv6:1:22:3:4:5:6:7&]" )
    assertIsFalse( "ip.v6.with.amp@[IPv6:1:22:3:4:5:6:7]&" )
    assertIsFalse( "ip.v6.with.amp@&[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.amp@[&IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.asterisk@[IPv6:1:2*2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.asterisk@[IPv6:1:22*:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.asterisk@[IPv6:1:22:*3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.asterisk@[IPv6:1:22:3:4:5:6:7*]" )
    assertIsFalse( "ip.v6.with.asterisk@[IPv6:1:22:3:4:5:6:7]*" )
    assertIsFalse( "ip.v6.with.asterisk@*[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.asterisk@[*IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.underscore@[IPv6:1:2_2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.underscore@[IPv6:1:22_:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.underscore@[IPv6:1:22:_3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.underscore@[IPv6:1:22:3:4:5:6:7_]" )
    assertIsFalse( "ip.v6.with.underscore@[IPv6:1:22:3:4:5:6:7]_" )
    assertIsFalse( "ip.v6.with.underscore@_[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.underscore@[_IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.dollar@[IPv6:1:2$2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dollar@[IPv6:1:22$:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dollar@[IPv6:1:22:$3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dollar@[IPv6:1:22:3:4:5:6:7$]" )
    assertIsFalse( "ip.v6.with.dollar@[IPv6:1:22:3:4:5:6:7]$" )
    assertIsFalse( "ip.v6.with.dollar@$[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.dollar@[$IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.equality@[IPv6:1:2=2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.equality@[IPv6:1:22=:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.equality@[IPv6:1:22:=3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.equality@[IPv6:1:22:3:4:5:6:7=]" )
    assertIsFalse( "ip.v6.with.equality@[IPv6:1:22:3:4:5:6:7]=" )
    assertIsFalse( "ip.v6.with.equality@=[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.equality@[=IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.exclamation@[IPv6:1:2!2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.exclamation@[IPv6:1:22!:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.exclamation@[IPv6:1:22:!3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.exclamation@[IPv6:1:22:3:4:5:6:7!]" )
    assertIsFalse( "ip.v6.with.exclamation@[IPv6:1:22:3:4:5:6:7]!" )
    assertIsFalse( "ip.v6.with.exclamation@![IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.exclamation@[!IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.question@[IPv6:1:2?2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.question@[IPv6:1:22?:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.question@[IPv6:1:22:?3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.question@[IPv6:1:22:3:4:5:6:7?]" )
    assertIsFalse( "ip.v6.with.question@[IPv6:1:22:3:4:5:6:7]?" )
    assertIsFalse( "ip.v6.with.question@?[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.question@[?IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.grave-accent@[IPv6:1:2`2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.grave-accent@[IPv6:1:22`:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.grave-accent@[IPv6:1:22:`3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.grave-accent@[IPv6:1:22:3:4:5:6:7`]" )
    assertIsFalse( "ip.v6.with.grave-accent@[IPv6:1:22:3:4:5:6:7]`" )
    assertIsFalse( "ip.v6.with.grave-accent@`[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.grave-accent@[`IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.hash@[IPv6:1:2#2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hash@[IPv6:1:22#:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hash@[IPv6:1:22:#3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hash@[IPv6:1:22:3:4:5:6:7#]" )
    assertIsFalse( "ip.v6.with.hash@[IPv6:1:22:3:4:5:6:7]#" )
    assertIsFalse( "ip.v6.with.hash@#[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hash@[#IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.percentage@[IPv6:1:2%2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.percentage@[IPv6:1:22%:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.percentage@[IPv6:1:22:%3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.percentage@[IPv6:1:22:3:4:5:6:7%]" )
    assertIsFalse( "ip.v6.with.percentage@[IPv6:1:22:3:4:5:6:7]%" )
    assertIsFalse( "ip.v6.with.percentage@%[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.percentage@[%IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.pipe@[IPv6:1:2|2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.pipe@[IPv6:1:22|:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.pipe@[IPv6:1:22:|3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.pipe@[IPv6:1:22:3:4:5:6:7|]" )
    assertIsFalse( "ip.v6.with.pipe@[IPv6:1:22:3:4:5:6:7]|" )
    assertIsFalse( "ip.v6.with.pipe@|[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.pipe@[|IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.plus@[IPv6:1:2+2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.plus@[IPv6:1:22+:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.plus@[IPv6:1:22:+3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.plus@[IPv6:1:22:3:4:5:6:7+]" )
    assertIsFalse( "ip.v6.with.plus@[IPv6:1:22:3:4:5:6:7]+" )
    assertIsFalse( "ip.v6.with.plus@+[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.plus@[+IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:2{2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22{:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:{3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:3:4:5:6:7{]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:3:4:5:6:7]{" )
    assertIsFalse( "ip.v6.with.leftbracket@{[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[{IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:2}2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22}:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:}3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:3:4:5:6:7}]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:3:4:5:6:7]}" )
    assertIsFalse( "ip.v6.with.rightbracket@}[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[}IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:2(2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22(:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:(3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:3:4:5:6:7(]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:3:4:5:6:7](" )
    assertIsFalse( "ip.v6.with.leftbracket@([IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[(IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:2)2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22):3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:)3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:3:4:5:6:7)]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:3:4:5:6:7])" )
    assertIsFalse( "ip.v6.with.rightbracket@)[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[)IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:2[2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22[:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:[3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:3:4:5:6:7[]" )
    assertIsFalse( "ip.v6.with.leftbracket@[IPv6:1:22:3:4:5:6:7][" )
    assertIsFalse( "ip.v6.with.leftbracket@[[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.leftbracket@[[IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:2]2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22]:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:]3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:3:4:5:6:7]]" )
    assertIsFalse( "ip.v6.with.rightbracket@[IPv6:1:22:3:4:5:6:7]]" )
    assertIsFalse( "ip.v6.with.rightbracket@][IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.rightbracket@[]IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:2()2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22():3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:()3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7()]" )
    assertIsTrue( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7]()" )
    assertIsTrue( "ip.v6.with.empty.bracket@()[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[()IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:2{}2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22{}:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:{}3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7{}]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7]{}" )
    assertIsFalse( "ip.v6.with.empty.bracket@{}[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[{}IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:2[]2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22[]:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:[]3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7[]]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7][]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[][IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[[]IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:2<>2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22<>:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:<>3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7<>]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[IPv6:1:22:3:4:5:6:7]<>" )
    assertIsFalse( "ip.v6.with.empty.bracket@<>[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.bracket@[<>IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.false.bracket1@[IPv6:1:2)(2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket1@[IPv6:1:22)(:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket1@[IPv6:1:22:)(3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket1@[IPv6:1:22:3:4:5:6:7)(]" )
    assertIsFalse( "ip.v6.with.false.bracket1@[IPv6:1:22:3:4:5:6:7])(" )
    assertIsFalse( "ip.v6.with.false.bracket1@)([IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket1@[)(IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.false.bracket2@[IPv6:1:2}{2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket2@[IPv6:1:22}{:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket2@[IPv6:1:22:}{3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket2@[IPv6:1:22:3:4:5:6:7}{]" )
    assertIsFalse( "ip.v6.with.false.bracket2@[IPv6:1:22:3:4:5:6:7]}{" )
    assertIsFalse( "ip.v6.with.false.bracket2@}{[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket2@[}{IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.false.bracket4@[IPv6:1:2><2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket4@[IPv6:1:22><:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket4@[IPv6:1:22:><3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket4@[IPv6:1:22:3:4:5:6:7><]" )
    assertIsFalse( "ip.v6.with.false.bracket4@[IPv6:1:22:3:4:5:6:7]><" )
    assertIsFalse( "ip.v6.with.false.bracket4@><[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.false.bracket4@[><IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.lower.than@[IPv6:1:2<2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.lower.than@[IPv6:1:22<:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.lower.than@[IPv6:1:22:<3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.lower.than@[IPv6:1:22:3:4:5:6:7<]" )
    assertIsFalse( "ip.v6.with.lower.than@[IPv6:1:22:3:4:5:6:7]<" )
    assertIsFalse( "ip.v6.with.lower.than@<[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.lower.than@[<IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.greater.than@[IPv6:1:2>2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.greater.than@[IPv6:1:22>:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.greater.than@[IPv6:1:22:>3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.greater.than@[IPv6:1:22:3:4:5:6:7>]" )
    assertIsFalse( "ip.v6.with.greater.than@[IPv6:1:22:3:4:5:6:7]>" )
    assertIsFalse( "ip.v6.with.greater.than@>[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.greater.than@[>IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.tilde@[IPv6:1:2~2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.tilde@[IPv6:1:22~:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.tilde@[IPv6:1:22:~3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.tilde@[IPv6:1:22:3:4:5:6:7~]" )
    assertIsFalse( "ip.v6.with.tilde@[IPv6:1:22:3:4:5:6:7]~" )
    assertIsFalse( "ip.v6.with.tilde@~[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.tilde@[~IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.xor@[IPv6:1:2^2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.xor@[IPv6:1:22^:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.xor@[IPv6:1:22:^3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.xor@[IPv6:1:22:3:4:5:6:7^]" )
    assertIsFalse( "ip.v6.with.xor@[IPv6:1:22:3:4:5:6:7]^" )
    assertIsFalse( "ip.v6.with.xor@^[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.xor@[^IPv6:1:22:3:4:5:6:7]" )

    assertIsTrue( "ip.v6.with.colon@[IPv6:1:2:2:3:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.colon@[IPv6:1:22::3:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.colon@[IPv6:1:22::3:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.colon@[IPv6:1:22:3:4:5:6:7:]" )
    assertIsFalse( "ip.v6.with.colon@[IPv6:1:22:3:4:5:6:7]:" )
    assertIsFalse( "ip.v6.with.colon@:[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.colon@[:IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.space@[IPv6:1:2 2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.space@[IPv6:1:22 :3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.space@[IPv6:1:22: 3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.space@[IPv6:1:22:3:4:5:6:7 ]" )
    assertIsFalse( "ip.v6.with.space@[IPv6:1:22:3:4:5:6:7] " )
    assertIsFalse( "ip.v6.with.space@ [IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.space@[ IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.comma@[IPv6:1:2,2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comma@[IPv6:1:22,:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comma@[IPv6:1:22:,3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comma@[IPv6:1:22:3:4:5:6:7,]" )
    assertIsFalse( "ip.v6.with.comma@[IPv6:1:22:3:4:5:6:7]," )
    assertIsFalse( "ip.v6.with.comma@,[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comma@[,IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.at@[IPv6:1:2@2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.at@[IPv6:1:22@:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.at@[IPv6:1:22:@3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.at@[IPv6:1:22:3:4:5:6:7@]" )
    assertIsFalse( "ip.v6.with.at@[IPv6:1:22:3:4:5:6:7]@" )
    assertIsFalse( "ip.v6.with.at@@[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.at@[@IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.paragraph@[IPv6:1:2§2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.paragraph@[IPv6:1:22§:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.paragraph@[IPv6:1:22:§3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.paragraph@[IPv6:1:22:3:4:5:6:7§]" )
    assertIsFalse( "ip.v6.with.paragraph@[IPv6:1:22:3:4:5:6:7]§" )
    assertIsFalse( "ip.v6.with.paragraph@§[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.paragraph@[§IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.double.quote@[IPv6:1:2'2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.quote@[IPv6:1:22':3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.quote@[IPv6:1:22:'3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.quote@[IPv6:1:22:3:4:5:6:7']" )
    assertIsFalse( "ip.v6.with.double.quote@[IPv6:1:22:3:4:5:6:7]'" )
    assertIsFalse( "ip.v6.with.double.quote@'[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.quote@['IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.forward.slash@[IPv6:1:2/2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.forward.slash@[IPv6:1:22/:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.forward.slash@[IPv6:1:22:/3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.forward.slash@[IPv6:1:22:3:4:5:6:7/]" )
    assertIsFalse( "ip.v6.with.forward.slash@[IPv6:1:22:3:4:5:6:7]/" )
    assertIsFalse( "ip.v6.with.forward.slash@/[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.forward.slash@[/IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.hyphen@[IPv6:1:2-2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hyphen@[IPv6:1:22-:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hyphen@[IPv6:1:22:-3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hyphen@[IPv6:1:22:3:4:5:6:7-]" )
    assertIsFalse( "ip.v6.with.hyphen@[IPv6:1:22:3:4:5:6:7]-" )
    assertIsFalse( "ip.v6.with.hyphen@-[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.hyphen@[-IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.empty.string1@[IPv6:1:2\"\"2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string1@[IPv6:1:22\"\":3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string1@[IPv6:1:22:\"\"3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string1@[IPv6:1:22:3:4:5:6:7\"\"]" )
    assertIsFalse( "ip.v6.with.empty.string1@[IPv6:1:22:3:4:5:6:7]\"\"" )
    assertIsFalse( "ip.v6.with.empty.string1@\"\"[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string1@[\"\"IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.empty.string2@[IPv6:1:2a\"\"b2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string2@[IPv6:1:22a\"\"b:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string2@[IPv6:1:22:a\"\"b3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string2@[IPv6:1:22:3:4:5:6:7a\"\"b]" )
    assertIsFalse( "ip.v6.with.empty.string2@[IPv6:1:22:3:4:5:6:7]a\"\"b" )
    assertIsFalse( "ip.v6.with.empty.string2@a\"\"b[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.empty.string2@[a\"\"bIPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.double.empty.string1@[IPv6:1:2\"\"\"\"2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string1@[IPv6:1:22\"\"\"\":3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string1@[IPv6:1:22:\"\"\"\"3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string1@[IPv6:1:22:3:4:5:6:7\"\"\"\"]" )
    assertIsFalse( "ip.v6.with.double.empty.string1@[IPv6:1:22:3:4:5:6:7]\"\"\"\"" )
    assertIsFalse( "ip.v6.with.double.empty.string1@\"\"\"\"[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string1@[\"\"\"\"IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.double.empty.string2@[IPv6:1:2\"\".\"\"2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string2@[IPv6:1:22\"\".\"\":3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string2@[IPv6:1:22:\"\".\"\"3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string2@[IPv6:1:22:3:4:5:6:7\"\".\"\"]" )
    assertIsFalse( "ip.v6.with.double.empty.string2@[IPv6:1:22:3:4:5:6:7]\"\".\"\"" )
    assertIsFalse( "ip.v6.with.double.empty.string2@\"\".\"\"[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.double.empty.string2@[\"\".\"\"IPv6:1:22:3:4:5:6:7]" )

    assertIsTrue( "ip.v6.with.number0@[IPv6:1:202:3:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.number0@[IPv6:1:220:3:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.number0@[IPv6:1:22:03:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.number0@[IPv6:1:22:3:4:5:6:70]" )
    assertIsFalse( "ip.v6.with.number0@[IPv6:1:22:3:4:5:6:7]0" )
    assertIsFalse( "ip.v6.with.number0@0[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.number0@[0IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.number9@[IPv6:1:292:3:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.number9@[IPv6:1:229:3:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.number9@[IPv6:1:22:93:4:5:6:7]" )
    assertIsTrue( "ip.v6.with.number9@[IPv6:1:22:3:4:5:6:79]" )
    assertIsFalse( "ip.v6.with.number9@[IPv6:1:22:3:4:5:6:7]9" )
    assertIsFalse( "ip.v6.with.number9@9[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.number9@[9IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.numbers@[IPv6:1:201234567892:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.numbers@[IPv6:1:220123456789:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.numbers@[IPv6:1:22:01234567893:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.numbers@[IPv6:1:22:3:4:5:6:70123456789]" )
    assertIsFalse( "ip.v6.with.numbers@[IPv6:1:22:3:4:5:6:7]0123456789" )
    assertIsFalse( "ip.v6.with.numbers@0123456789[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.numbers@[0123456789IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.byte.overflow@[IPv6:1:29992:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.byte.overflow@[IPv6:1:22999:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.byte.overflow@[IPv6:1:22:9993:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.byte.overflow@[IPv6:1:22:3:4:5:6:7999]" )
    assertIsFalse( "ip.v6.with.byte.overflow@[IPv6:1:22:3:4:5:6:7]999" )
    assertIsFalse( "ip.v6.with.byte.overflow@999[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.byte.overflow@[999IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.no.hex.number@[IPv6:1:2xyz2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.no.hex.number@[IPv6:1:22xyz:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.no.hex.number@[IPv6:1:22:xyz3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.no.hex.number@[IPv6:1:22:3:4:5:6:7xyz]" )
    assertIsFalse( "ip.v6.with.no.hex.number@[IPv6:1:22:3:4:5:6:7]xyz" )
    assertIsFalse( "ip.v6.with.no.hex.number@xyz[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.no.hex.number@[xyzIPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.slash@[IPv6:1:2\\2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.slash@[IPv6:1:22\\:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.slash@[IPv6:1:22:\\3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.slash@[IPv6:1:22:3:4:5:6:7\\]" )
    assertIsFalse( "ip.v6.with.slash@[IPv6:1:22:3:4:5:6:7]\\" )
    assertIsFalse( "ip.v6.with.slash@\\[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.slash@[\\IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.string@[IPv6:1:2\"str\"2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.string@[IPv6:1:22\"str\":3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.string@[IPv6:1:22:\"str\"3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.string@[IPv6:1:22:3:4:5:6:7\"str\"]" )
    assertIsFalse( "ip.v6.with.string@[IPv6:1:22:3:4:5:6:7]\"str\"" )
    assertIsFalse( "ip.v6.with.string@\"str\"[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.string@[\"str\"IPv6:1:22:3:4:5:6:7]" )

    assertIsFalse( "ip.v6.with.comment@[IPv6:1:2(comment)2:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comment@[IPv6:1:22(comment):3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comment@[IPv6:1:22:(comment)3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comment@[IPv6:1:22:3:4:5:6:7(comment)]" )
    assertIsTrue( "ip.v6.with.comment@[IPv6:1:22:3:4:5:6:7](comment)" )
    assertIsTrue( "ip.v6.with.comment@(comment)[IPv6:1:22:3:4:5:6:7]" )
    assertIsFalse( "ip.v6.with.comment@[(comment)IPv6:1:22:3:4:5:6:7]" )

    assertIsTrue( "ABC.DEF@[IPv6:0000:0000:0000:0000:0000:0000:0000:0000]" )
    assertIsTrue( "ABC.DEF@[IPv6:ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff]" )
    assertIsTrue( "ABC.DEF@[IPv6:2001:0db8:0000:85a3:0000:0000:ac1f:8001]" )
    assertIsTrue( "ABC.DEF@[IPv6:fe80::217:f2ff:fe07:ed62]" )
    assertIsTrue( "ABC.DEF@[IPv6:fe00::1]" )
    assertIsFalse( "ABC.DEF@[IPv6:10.168.0001.100]" )
    assertIsFalse( "ABC.DEF@[IPv6:2001:0000:1234:0000:00001:C1C0:ABCD:0876]" )
    assertIsFalse( "ABC.DEF@[IPv6:2001:0000:1234: 0000:0000:C1C0:ABCD:0876]" )
    assertIsFalse( "ABC.DEF@[IPv6:2001:0000:1234:0000:0000:C1C0:ABCD:0876 0]" )

    wlHeadline( "IP V4 embedded in IP V6" )

    assertIsTrue( "ABC.DEF@[IPv6::FFFF:127.0.0.1]" )
    assertIsTrue( "ABC.DEF@[IPv6::ffff:127.0.0.1]" )

    assertIsTrue( "ABC.DEF@[::FFFF:127.0.0.1]" )
    assertIsTrue( "ABC.DEF@[::ffff:127.0.0.1]" )

    assertIsFalse( "ABC.DEF@[IPv6::ffff:.127.0.1]" )
    assertIsFalse( "ABC.DEF@[IPv6::fff:127.0.0.1]" )
    assertIsFalse( "ABC.DEF@[IPv6::1234:127.0.0.1]" )
    assertIsFalse( "ABC.DEF@[IPv6:127.0.0.1]" )
    assertIsFalse( "ABC.DEF@[IPv6:::127.0.0.1]" )
    assertIsFalse( "ABC.DEF@[IPv6::FFFF:-127.0.0.1]" )
    assertIsFalse( "ABC.DEF@[IPv6::FFFF:127.0.-0.1]" )
    assertIsFalse( "ABC.DEF@[IPv6::ffff:127.0.0.999]" )
    assertIsFalse( "ABC.DEF@[IPv6::ffff:127.0.0.0001]" )
    assertIsFalse( "ABC.DEF@[IPv6::ffff:127.0.XYZ.1]" )
    
def runTestUnsortet():
    wlHeadline( "unsorted" )

    assertIsTrue( 'name1@domain.com' )    
    assertIsFalse( '' )
    assertIsFalse( 'n@d.c')
    assertIsFalse('name1.@domain.com')
    assertIsFalse('name1@.domain.com')
    assertIsFalse('@name1.at.domain.com')
    assertIsFalse('name1.at.domain.com@')
    assertIsFalse('name1@name2@domain.com')
    assertIsFalse( 'name1.domain.com' )    

    assertIsFalse( '.name1@domain.com' )    
    assertIsFalse( 'name1.@domain.com' )    
    assertIsFalse( 'name1@.domain.com' )    
    assertIsFalse( 'name1@domain.com.' )    
    assertIsFalse( 'name1..name2@domain.com' )    
    assertIsFalse( 'name1@domain..com' )    

    assertIsTrue( "&localandpart&with&$@amp.com" )
    assertIsTrue( "*local**part*with*@asterisk.com" )
    assertIsTrue( "$local$$part$with$@dollar.com" )
    assertIsTrue( "=local==part=with=@equality.com" )
    assertIsTrue( "!local!!part!with!@exclamation.com" )
    assertIsTrue( "`local``part`with`@grave-accent.com" )
    assertIsTrue( "#local##part#with#@hash.com" )
    assertIsTrue( "-local--part-with-@hypen.com" )
    assertIsTrue( "|localorpart|with|@pipe.com" )
    assertIsTrue( "+local++part+with+@plus.com" )
    assertIsTrue( "?local??part?with?@question.com" )
    assertIsTrue( "~local~~part~with~@tilde.com" )
    assertIsTrue( "^local^^part^with^@xor.com" )
    assertIsTrue( "_local__part_with_@underscore.com" )
    assertIsFalse( ":local::part:with:@colon.com" )

    assertIsFalse( "local.part@&domainandpart&with&.com" )
    assertIsFalse( "local.part@*domain**part*with*.com" )
    assertIsFalse( "local.part@$domain$$part$with$.com" )
    assertIsFalse( "local.part@=domain==part=with=.com" )
    assertIsFalse( "local.part@!domain!!part!with!.com" )
    assertIsFalse( "local.part@`domain``part`with`.com" )
    assertIsFalse( "local.part@#domain##part#with#.com" )
    assertIsFalse( "local.part@-domain--part-with-.com" )
    assertIsFalse( "local.part@|domainorpart|with|.com" )
    assertIsFalse( "local.part@+domain++part+with+.com" )
    assertIsFalse( "local.part@?domain??part?with?.com" )
    assertIsFalse( "local.part@~domain~~part~with~.com" )
    assertIsFalse( "local.part@^domain^^part^with^.com" )
    assertIsFalse( "local.part@_domain__part_with_.com" )

    assertIsTrue( '"string1".name1@domain1.tld' )
    assertIsTrue( "name1.\"string1\"@domain1.tld" )
    assertIsTrue( "name1.\"string1\".name2@domain1.tld" )
    assertIsTrue( "name1.\"string1\".name2@subdomain1.domain1.tld" )
    assertIsTrue( "\"string1\".\"quote2\".name1@domain1.tld" )
    assertIsTrue( "\"string1\"@domain1.tld" )
    assertIsTrue( "\"string1\\\"embedded string\\\"\"@domain1.tld" )
    assertIsTrue( "\"string1(embedded comment)\"@domain1.tld" )

    assertIsTrue( "(comment1)name1@domain1.tld" )
    assertIsTrue( "(comment1)-name1@domain1.tld" )
    assertIsTrue( "name1(comment1)@domain1.tld" )
    assertIsTrue( "name1@(comment1)domain1.tld" )
    assertIsTrue( "name1@domain1.tld(comment1)" )
    assertIsTrue( "(spaces after comment)     name1.name2@domain1.tld" )
    assertIsTrue( "name1.name2@domain1.tld   (spaces before comment)" )


    assertIsFalse( "email.with.no.domain\\@domain.com" )
    assertIsFalse( "email.with.no.domain\\@.domain.com" )
    assertIsFalse( "email.with.no.domain\\@123domain.com" )
    assertIsFalse( "email.with.no.domain\\@_domain.com" )
    assertIsFalse( "email.with.no.domain\\@-domain.com" )
    assertIsFalse( "email.with.double\\@no.domain\\@domain.com" )
    assertIsTrue( "\"wrong.at.sign.combination.in.string1@.\"@domain.com" )
    assertIsTrue( "\"wrong.at.sign.combination.in.string2.@\"@domain.com" )

    assertIsTrue( "email.with.escaped.at\\@.sign.version1@domain.com" )
    assertIsTrue( "email.with.escaped.\\@.sign.version2@domain.com" )
    assertIsTrue( "email.with.escaped.at\\@123.sign.version3@domain.com" )
    assertIsTrue( "email.with.escaped.\\@123.sign.version4@domain.com" )
    assertIsTrue( "email.with.escaped.at\\@-.sign.version5@domain.com" )
    assertIsTrue( "email.with.escaped.\\@-.sign.version6@domain.com" )
    assertIsTrue( "email.with.escaped.at.sign.\\@@domain.com" )

    assertIsTrue( "(@) email.with.at.sign.in.commet1@domain.com" )
    assertIsTrue( "email.with.at.sign.in.commet2@domain.com (@)" )
    assertIsTrue( "email.with.at.sign.in.commet3@domain.com (.@)" )

def runTestDisplayName():
    
    wlHeadline( "Display Name" )

    assertIsTrue( "ABC DEF <ABC.DEF@GHI.JKL>" )
    assertIsTrue( "<ABC.DEF@GHI.JKL> ABC DEF" )
    assertIsFalse( "ABC DEF ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<ABC.DEF@GHI.JKL ABC DEF" )
    assertIsTrue( "\"ABC DEF \"<ABC.DEF@GHI.JKL>" )
    assertIsTrue( "\"ABC<DEF>\"@JKL.DE" )
    assertIsTrue( "\"ABC<DEF@GHI.COM>\"@JKL.DE" )
    assertIsFalse( "ABC DEF <ABC.<DEF@GHI.JKL>" )
    assertIsFalse( "<ABC.DEF@GHI.JKL> MNO <PQR.STU@VW.XYZ>" )
    assertIsFalse( "ABC DEF <ABC.DEF@GHI.JKL" )
    assertIsFalse( "ABC.DEF@GHI.JKL> ABC DEF" )
    assertIsFalse( "ABC DEF >ABC.DEF@GHI.JKL<" )
    assertIsFalse( ">ABC.DEF@GHI.JKL< ABC DEF" )
    assertIsFalse( "ABC DEF <A@A>" )
    assertIsFalse( "<A@A> ABC DEF" )
    assertIsFalse( "ABC DEF <>" )
    assertIsFalse( "<> ABC DEF" )
    assertIsFalse( "<" )
    assertIsFalse( ">" )
    assertIsFalse( "<         >" )
    assertIsFalse( "< <     > >" )
    assertIsTrue( "<ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<.ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<ABC.DEF@GHI.JKL.>" )

    assertIsTrue( "<-ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<ABC.DEF@GHI.JKL->" )

    assertIsTrue( "<_ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<ABC.DEF@GHI.JKL_>" )

    assertIsTrue( "<(Comment)ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<(Comment).ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<.(Comment)ABC.DEF@GHI.JKL>" )
    assertIsTrue( "<(Comment)-ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<-(Comment)ABC.DEF@GHI.JKL>" )
    assertIsTrue( "<(Comment)_ABC.DEF@GHI.JKL>" )
    assertIsFalse( "<_(Comment)ABC.DEF@GHI.JKL>" )

    assertIsTrue( "Joe Smith <email@domain.com>" )
    assertIsFalse( "Joe Smith <mailto:email@domain.com>" )
    assertIsFalse( "Joe Smith <mailto:email(with comment)@domain.com>" )
    assertIsTrue( "Non EMail part <(comment)Local.\"Part\"@[IPv6::ffff:127.0.0.1]>" )
    assertIsTrue( "Non EMail part <Local.\"Part\"(comment)@[IPv6::ffff:127.0.0.1]>" )
    assertIsTrue( "<(comment)Local.\"Part\"@[IPv6::ffff:127.0.0.1]> Non EMail part" )
    assertIsTrue( "<Local.\"Part\"(comment)@[IPv6::ffff:127.0.0.1]> Non EMail part " )
    assertIsFalse( "Non EMail part < (comment)Local.\"Part\"@[IPv6::ffff:127.0.0.1]>" )
    assertIsFalse( "Non EMail part <Local.\"Part\"(comment)B@[IPv6::ffff:127.0.0.1]>" )
    assertIsFalse( "< (comment)Local.\"Part\"@[IPv6::ffff:127.0.0.1]> Non EMail part" )
    assertIsFalse( "<Local.\"Part\"(comment)B@[IPv6::ffff:127.0.0.1]> Non EMail part " )
    assertIsFalse( "Test |<gaaf <email@domain.com>" )
    assertIsFalse( "Display Name <email@plus.com> (Comment after name with display)" )
    assertIsFalse( "\"With extra < within quotes\" Display Name<email@domain.com>" )
    assertIsFalse( "<null>@mail.com" )

    assertIsFalse( "email.adress@domain.com <display name>" )
    assertIsFalse( "email.adress@domain.com <email.adress@domain.com>" )
    assertIsFalse( "display.name@false.com <email.adress@correct.com>" )
    assertIsFalse( "<email>.<adress>@domain.com" )
    assertIsFalse( "<email>.<adress> email.adress@domain.com" )

def runTestStrings():
  
    wlHeadline( "Strings" )

    assertIsTrue( "\"local.part.only.string\"@domain.com" )
    assertIsTrue( "\"&lt; &clubs; &diams; &hearts; &spades; experiment &gt;\"@domain.com" )
    assertIsTrue( "\"local.part\".\"two.strings\"@domain.com" )
    assertIsFalse( "-\"hyphen.before.string\"@domain.com" )
    assertIsFalse( "\"hyphen.after.string\"-.\"string2\"@domain.com" )
    assertIsFalse( "\"hyphen.before.string2\".-\"string2\"@domain.com" )
    assertIsFalse( ".\"point.before.string\".\"string2\"@domain.com" )
    assertIsTrue( "\"space in string\"@domain.com" )
    assertIsTrue( "\"at.sign@in.string\"@domain.com" )
    assertIsTrue( "\"escaped.qoute.in\\\"string\"@domain.com" )
    assertIsTrue( "\"escaped.at.sign\\@in.string\"@domain.com" )
    assertIsTrue( "\"escaped.sign.\'in.string\"@domain.com" )
    assertIsTrue( "\"escaped.back.slash\\\\in.string\"@domain.com" )
    assertIsFalse( "\"\"@empty.string.domain.com" )
    assertIsFalse( "\"missplaced.end.of.string@do\"main.com" )
    assertIsFalse( "domain.part.is.string@\"domain.com\"" )
    assertIsFalse( "not.closed.string.in.domain.part.version1@\"domain.com" )
    assertIsFalse( "not.closed.string.in.domain.part.version2@do\"main.com" )
    assertIsFalse( "not.closed.string.in.domain.part.version3@domain.com\"" )
    assertIsFalse( "string.in.domain.part4@do\"main.com\"" )
    assertIsFalse( "string.in.domain.part5@do\"main.com" )
    assertIsFalse( "embedded.string.in.domain.part@do\"ma\"in.com" )
    assertIsFalse( "\"@missplaced.start.of.string" )
    assertIsFalse( "no.at.sign.and.no.domain.part.\"" )
    assertIsFalse( "domain.part.is.empty.string@\"\"" )
    assertIsFalse( "\"no.email.adress.only.string\"" )
    assertIsFalse( "\"no.email.adress.only.string.and.missplaced.backslash\\" )

    assertIsFalse( "no.email.adress\"with.string.start" )
    assertIsFalse( "string.starts.before.at.sign\"@domain.com" )
    assertIsFalse( "string.starts.before.at.sign\"but.with.caracters.before.at.sign@domain.com" )
    assertIsFalse( "ABC.DEF.\"@GHI.DE" )

    assertIsFalse( "\"\".email.starts.with.empty.string@domain.com" )
    assertIsTrue( "\"string.with.double..point\"@domain.com" )
    assertIsTrue( "string.with.\"(comment)\".in.string@domain.com" )
    assertIsTrue( "string.with.brackets.\")()(\".in.string@domain.com" )
    assertIsTrue( "\"string.with.\\\".\\\".point\"@domain.com" )
    assertIsTrue( "\"string.with.embedded.empty.\\\"\\\".string\"@domain.com" )
    assertIsTrue( "\"embedded.string.with.space.and.escaped.\\\" \\@ \\\".at.sign\"@domain.com" )

    assertIsFalse( "\"string.is.not.closed@domain.com" )
    assertIsFalse( "\"whole.email.adress.is.string@domain.com\"" )
    assertIsTrue( "\".ABC.DEF\"@GHI.DE" )
    assertIsTrue( "\"ABC.DEF.\"@GHI.DE" )
    assertIsTrue( "\"ABC\".DEF.\"GHI\"@JKL.de" )
    assertIsFalse( "A\"BC\".DEF.\"GHI\"@JKL.de" )
    assertIsFalse( "\"ABC\".DEF.G\"HI\"@JKL.de" )
    assertIsFalse( "\"AB\"C.DEF.\"GHI\"@JKL.de" )
    assertIsFalse( "\"ABC\".DEF.\"GHI\"J@KL.de" )
    assertIsFalse( "\"AB\"C.D\"EF\"@GHI.DE" )
    assertIsFalse( "A\"B\"C.D\"E\"F@GHI.DE" )
    assertIsFalse( "ABC.DEF@G\"H\"I.DE" )

    assertIsFalse( "\"\".\"\".ABC.DEF@GHI.DE" )
    assertIsFalse( "\"\"\"\"ABC.DEF@GHI.DE" )
    assertIsFalse( "AB\"\"\"\"C.DEF@GHI.DE" )
    assertIsFalse( "ABC.DEF@G\"\"\"\"HI.DE" )
    assertIsFalse( "ABC.DEF@GHI.D\"\"\"\"E" )
    assertIsFalse( "ABC.DEF@GHI.D\"\".\"\"E" )
    assertIsFalse( "ABC.DEF@GHI.\"\"\"\"DE" )
    assertIsFalse( "ABC.DEF@GHI.\"\".\"\"DE" )
    assertIsFalse( "ABC.DEF@GHI.D\"\"E" )
    assertIsFalse( "0\"00.000\"@domain.com" )
    assertIsTrue( "\"A[B]C\".\"D<E>F\".\"G(H)I\"@JKL.de" )
    assertIsFalse( "\"A[B]C\".D(E)F.\"GHI\"@JKL.de" )
    assertIsFalse( "\"A[B]C\".D[E]F.\"GHI\"@JKL.de" )
    assertIsFalse( "\"A[B]C\".D<E>F.\"GHI\"@JKL.de" )
    assertIsTrue( "\"()<>[]:.;@\\\\\\\"!#$%&'*+-/=?^_`{}| ~.a\"@example.org" )

    assertIsTrue( "\"ABC \\\"\\\\\\\" !\".DEF@GHI.DE" )
  
def runTestComments():

    wlHeadline( "Comments" )

    assertIsFalse( "escape.character.at.input.end@domain.com (comment \\" )

    assertIsTrue( "(comment)local.part.with.comment.at.start@domain.com" )
    assertIsTrue( "(comment \\\"string1\\\" \\\"string2) is.not.closed@domain.com" )
    assertIsTrue( "(comment) local.part.with.space.after.comment.at.start@domain.com" )
    assertIsFalse( "(comment)at.start.and.end@domain.com(comment end)" )
    assertIsFalse( "(two.comments)in.the(local.part)@domain.com" )
    assertIsFalse( "(nested(comment))in.the.local.part@domain.com" )
    assertIsTrue( "local.part.with.comment.before(at.sign)@domain.com" )
    assertIsFalse( "local.part.with.comment.before(at.sign.and.spaces.after.comment)    @domain.com" )
    assertIsFalse( "(local.part.with) (two.comments.with.space.after)  comment@domain.com" )
    assertIsFalse( "(local.part.with) (two.comments.with.space.after.first).comment@domain.com" )
    assertIsTrue( "domain.part.with.comment.at.the.end@domain.com(comment)" )
    assertIsFalse( "comment.not(closed@domain.com" )
    assertIsFalse( "comment.not.startet@do)main.com" )
    assertIsFalse( ")comment.close.bracket.at.start@domain.com" )
    assertIsFalse( "comment.close.bracket.before.at.sign)@domain.com" )
    assertIsTrue( "ip4.with.comment.after.at.sign.at.input.start@(without.space)[1.2.3.4]" )
    assertIsTrue( "ip4.with.comment.after.at.sign.at.input.end@[1.2.3.4](without.space)" )
    assertIsTrue( "ip4.with.comment.after.at.sign.at.input.end@[1.2.3.4]  (with.space.before.comment)" )
    assertIsFalse( "ip4.with.comment.after.at.sign@(with.space) [1.2.3.4]" )
    assertIsFalse( "ip4.with.embedded.comment.in.ip4@[1.2.3(comment).4]" )
    assertIsFalse( "()()()three.consecutive.empty.comments.at.email.start@domain.com" )
    assertIsTrue( "morse.code.in.comment(... .... .. -)@storm.de" )
    assertIsTrue( "(comment)          \"string\".name1@domain.tld" )
    assertIsFalse( "(comment) Error )  \"string\".name1@domain.tld" )
    assertIsFalse( "(comment(nested Comment)) nested.comments.not.supported@domain.com" )
    assertIsFalse( ")                  \"string\".name1@domain.tld" )
    assertIsFalse( ")))))              \"string\".name1@domain.tld" )
    assertIsFalse( "())                \"string\".name1@domain.tld" )
    assertIsFalse( "   ())             \"string\".name1@domain.tld" )
    assertIsFalse( "(input.is.only.one.comment)" )
    assertIsFalse( "  (input.is.only.one.comment.with.leading.spaces)" )
    assertIsFalse( "(input.is.only.one.comment.with.trailing.spaces)    " )
    assertIsFalse( "(comment)  ." )
    assertIsFalse( "(comment.space.point.space) . " )
    assertIsFalse( "domain.part.with.comment.but.spaces.after.comment@domain.com(comment)    " )
    assertIsTrue( "domain.part.with.comment@(comment)domain.com" )
    assertIsTrue( "domain.part.with.comment@(and.at.sgin.in.comment.@.)domain.com" )
    assertIsTrue( "domain.part.with.comment@(and.escaped.at.sgin.in.comment.\\@.)domain.com" )
    assertIsFalse( "ABC.DEF@(GHI)   JKL.MNO" )
    assertIsFalse( "ABC.DEF@(GHI.)   JKL.MNO" )
    assertIsFalse( "ABC.DEF@(GHI.) (ABC)JKL.MNO" )
    assertIsFalse( "ABC.DEF@(GHI().()ABC)JKL.MNO" )
    assertIsFalse( "ABC.DEF@(GHI.)   JKL(MNO)" )
    assertIsTrue( "ABC.DEF@GHI.JKL      (MNO)" )
    assertIsFalse( "ABC.DEF@             (MNO)" )
    assertIsFalse( "ABC.DEF@   .         (MNO)" )
    assertIsFalse( "ABC.DEF              (MNO)" )
    assertIsFalse( "ABC.DEF@GHI.         (MNO)" )
    assertIsFalse( "ABC.DEF@GHI.JKL       MNO" )
    assertIsFalse( "ABC.DEF@GHI.JKL          " )
    assertIsFalse( "ABC.DEF@GHI.JKL       .  " )
    assertIsFalse( "(" )
    assertIsFalse( "(         )" )
    assertIsFalse( ")" )
    assertIsTrue( "ABC.DEF@GHI.JKL ()" )
    assertIsTrue( "ABC.DEF@GHI.JKL()" )
    assertIsTrue( "ABC.DEF@()GHI.JKL" )
    assertIsTrue( "ABC.DEF()@GHI.JKL" )
    assertIsTrue( "()ABC.DEF@GHI.JKL" )
    assertIsFalse( "ABC.DEF@(GHI.JKL)" )
    assertIsFalse( "ABC.DEF@GHI.JKL ()()" )
    assertIsFalse( "(ABC)(DEF)@GHI.JKL" )
    assertIsFalse( "(ABC()DEF)@GHI.JKL" )
    assertIsFalse( "(ABC(Z)DEF)@GHI.JKL" )
    assertIsFalse( "(ABC).(DEF)@GHI.JKL" )
    assertIsFalse( "(ABC).DEF@GHI.JKL" )
    assertIsFalse( "ABC.(DEF)@GHI.JKL" )
    assertIsFalse( "ABC.DEF@(GHI).JKL" )
    assertIsFalse( "ABC.DEF@GHI.(JKL).MNO" )
    assertIsFalse( "ABC.DEF@GHI.JK(L.M)NO" )
    assertIsFalse( "AB(CD)EF@GHI.JKL" )
    assertIsFalse( "AB.(CD).EF@GHI.JKL" )
    assertIsFalse( "(ABCDEF)@GHI.JKL" )
    assertIsFalse( "(ABCDEF).@GHI.JKL" )
    assertIsFalse( "(AB\"C)DEF@GHI.JKL" )
    assertIsFalse( "(AB\\C)DEF@GHI.JKL" )
    assertIsFalse( "(AB\\@C)DEF@GHI.JKL" )
    assertIsFalse( "ABC(DEF@GHI).JKL" )
    assertIsFalse( "ABC(DEF.GHI).JKL" )
    assertIsFalse( "(ABC.DEF@GHI.JKL)" )
    assertIsFalse( "(A(B(C)DEF@GHI.JKL" )
    assertIsFalse( "(A)B)C)DEF@GHI.JKL" )
    assertIsFalse( "(A)BCDE(F)@GHI.JKL" )
    assertIsFalse( "ABC.DEF@(GH)I.JK(LM)" )
    assertIsFalse( "ABC.DEF@(GH(I.JK)L)M" )
    assertIsTrue( "ABC.DEF@(comment)[IPv6:1:2:3::5:6:7:8]" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3::5:6:7:8](comment)" )
    assertIsTrue( "ABC.DEF@[IPv6:1:2:3::5:6:7:8]    (comment)" )
    assertIsFalse( "(Comment).ABC.DEF@GHI.JKL" )
    assertIsTrue( "(Comment)-ABC.DEF@GHI.JKL" )
    assertIsTrue( "(Comment)_ABC.DEF@GHI.JKL" )
    assertIsFalse( "-(Comment)ABC.DEF@GHI.JKL" )
    assertIsFalse( ".(Comment)ABC.DEF@GHI.JKL" )
    assertIsFalse( "a@abc(bananas)def.com" )
    assertIsTrue( "\"address(comment\"@example.com" )
    assertIsFalse( "address(co\"mm\"ent)@example.com" )
    assertIsFalse( "address(co\"mment)@example.com" )

    assertIsFalse( "test@test.com(comment" )

def runTestVariousInternet():

    wlHeadline( "unsorted from the WEB" )

    assertIsFalse( "testm ail@mail.com" ) #// spaces into the string
    assertIsFalse( "testmail@mail.com." ) #// finish with points
    assertIsFalse( ".testmail@mail.com" ) #// start with points
    assertIsFalse( " testmail@mail.com" ) #// spaces at start
    assertIsTrue( "username@company.domain" )
    assertIsTrue( "support@whoisxmlapi.com" )
    assertIsTrue( "popular_website15@comPany.com" )
    assertIsTrue( "domain.starts.with.numbers1@1234domain.com" )
    assertIsTrue( "domain.starts.with.numbers2@123.123domain.com" )
    assertIsTrue( "^local.part.with.caret@domain.com" )
    assertIsTrue( "answers@educative.io" )
    assertIsTrue( "test_123@gmail.com" )
    assertIsTrue( "student@mit.edu" )
    assertIsTrue( "admission@ox.ac.uk" )
    assertIsTrue( "-9i{@ssss.ss" )
    assertIsFalse( "-9i{@-ssss.ss" )
    assertIsFalse( "answers@educative" )
    assertIsFalse( "test 123@gmail.com" )
    assertIsFalse( "student@mitedu" )
    assertIsFalse( "admission@@ox.ac.uk" )
    assertIsFalse( "my@as@sd.com" )
    assertIsFalse( "{a}!%?@@bar.com" )
    assertIsFalse( "foo#!@@bar.com" )
    assertIsFalse( "Younourmetd345@abcd.b" )
    assertIsFalse( "@youmenandwe.we.net" )
    assertIsFalse( "yourminewebsite@.com.you " )
    assertIsFalse( "Ourwebsiteismne.azbyz.com" )
    assertIsFalse( "Inownzsite()&@abcd.com" )
    assertIsFalse( "Owner.me..7080@abcd.com" )
    assertIsTrue( "Own.minesite@myuniverse.org" )
    assertIsTrue( "my+address@example.org" )
    assertIsFalse( "me@Ｄｏｍａｉｎ.com" )
    assertIsFalse( "me@D o m a i n.com" )
    assertIsFalse( "invalid@domain,com" )
    assertIsTrue( "hello@00.pe" )
    assertIsTrue( "\"@\"@domain.com" )
    assertIsTrue( "\\@@domain.com" )
    assertIsTrue( "to1@domain.com" )
    assertIsTrue( "Full Name <full@example.com>" )
    assertIsFalse( "ツ-test@joshdata.me" )
    assertIsFalse( "user@@host" )
    assertIsTrue( "t#@d.com" )
    assertIsFalse( "u\"evil@domain.com" )
    assertIsTrue( "nonexistinglogin@valid-domain.com" )
    assertIsTrue( "user@department.company.com" )
    assertIsTrue( "john@example.com" )
    assertIsTrue( "python-list@python.org" )
    assertIsTrue( "wha.t.`1an?ug{}ly@email.com" )
    assertIsFalse( "Hello ABCD, here is my mail id example@me.com " )
    assertIsTrue( "\"djt jr\"@wh.gov" )
    assertIsFalse( "a..@..............a" )
    assertIsTrue( "me+valid@mydomain.example.net" )
    assertIsTrue( "revo@74.125.228.53" )
    assertIsFalse( "revo@test&^%$#|.com" )
    assertIsTrue( "ansel@adams.photography" )
    assertIsFalse( "<')))><@fish.left.com" )
    assertIsFalse( "><(((*>@fish.right.com" )
    assertIsFalse( " check@this.com" )
    assertIsFalse( " email@example.com" )
    assertIsFalse( ".....@a...." )
    assertIsFalse( "..@test.com" )
    assertIsFalse( "..@test.com" )
    assertIsTrue( "\"test....\"@gmail.com" ) 
    assertIsFalse( "test....@gmail.com" )
    assertIsTrue( "name@xn--4ca9at.at" )
    assertIsTrue( "simon-@hotmail.com" )
    assertIsTrue( "!@mydomain.net" )
    assertIsTrue( "sean.o'leary@cobbcounty.org" )
    assertIsTrue( "xjhgjg876896@domain.com" )
    assertIsTrue( "Tony Snow <tony@example.com>" )
    assertIsTrue( "(tony snow) tony@example.com" )
    assertIsTrue( "tony%example.com@example.org" )
    assertIsFalse( "a@[a-a:::::aa:aa:aa:aa:aa:aa:aa:aa:aa:aa:aa:aa:aa:aa]" )
    assertIsFalse( "a-b'c_d.e@f-g.h" )
    assertIsFalse( "a-b'c_d.@f-g.h" )
    assertIsFalse( "a-b'c_d.e@f-.h" )
    assertIsTrue( "\"root\"@example.com" )
    assertIsTrue( "root@example.com" )
    assertIsFalse( ".@s.dd" )
    assertIsFalse( ".@s.dd" )
    assertIsFalse( ".a@test.com" )
    assertIsFalse( ".a@test.com" )
    assertIsFalse( ".abc@somedomain.com" )
    assertIsFalse( ".dot@example.com" )
    assertIsFalse( ".email@domain.com" )
    assertIsFalse( ".journaldev@journaldev.com" )
    assertIsFalse( ".username@yahoo.com" )
    assertIsFalse( ".username@yahoo.com" )
    assertIsFalse( ".xxxx@mysite.org" )
    assertIsFalse( "stuff.@stuff.com" )
    assertIsFalse( "asdf@asdf" )
    assertIsFalse( "123@$.xyz" )
    assertIsFalse( "<1234   @   local(blah)  .machine .example>" )
    assertIsFalse( "@%^%#$@#$@#.com" )
    assertIsFalse( "@b.com" )
    assertIsFalse( "@domain.com" )
    assertIsFalse( "@example.com" )
    assertIsFalse( "@mail.example.com:joe@sixpack.com" )
    assertIsFalse( "@yahoo.com" )
    assertIsFalse( "@you.me.net" )
    assertIsFalse( "A@b@c@example.com" )
    assertIsFalse( "Abc.example.com" )
    assertIsFalse( "Abc@example.com." )
    assertIsFalse( "Abc..123@example.com" )
    assertIsFalse( "a\"b(c)d,e:f;g<h>i[j\\k]l@example.com" )
    assertIsFalse( "Display Name <email@plus.com> (after name with display)" )
    assertIsFalse( "Doug\\ \\\"Ace\\\"\\ L\\.@example.com" )
    assertIsFalse( "Doug\\ \\\"Ace\\\"\\ Lovell@example.com" )
    assertIsFalse( "Foobar Some@thing.com" )
    assertIsFalse( "MailTo:casesensitve@domain.com" )
    assertIsFalse( "No -foo@bar.com" )
    assertIsFalse( "No asd@-bar.com" )
    assertIsFalse( "DomainHyphen@-atstart" )
    assertIsFalse( "DomainHyphen@atend-.com" )
    assertIsFalse( "DomainHyphen@bb.-cc" )
    assertIsFalse( "DomainHyphen@bb.-cc-" )
    assertIsFalse( "DomainHyphen@bb.cc-" )
    assertIsFalse( "DomainHyphen@bb.c-c" ) 
    assertIsFalse( "DomainNotAllowedCharacter@/atstart" )
    assertIsTrue( "DomainNotAllowedCharacter@a.start" )
    assertIsFalse( "DomainNotAllowedCharacter@atst\\art.com" )
    assertIsFalse( "DomainNotAllowedCharacter@exa\\mple" )
    assertIsFalse( "DomainNotAllowedCharacter@example'" )
    assertIsFalse( "DomainNotAllowedCharacter@100%.de'" )
    assertIsTrue( "domain.starts.with.digit@2domain.com" )
    assertIsTrue( "domain.ends.with.digit@domain2.com" )
    assertIsFalse( "tld.starts.with.digit@domain.2com" )
    assertIsTrue( "tld.ends.with.digit@domain.com2" )
    assertIsTrue( "enrst.den.baecker@web.de" )
    assertIsTrue( "neserdna.trebkce@web.de" )
    assertIsTrue( "rpxoreg.naqerfra@web.de" )
    assertIsFalse( "unescaped white space@fake$com" )
    assertIsTrue( "\"SL-EA-234\"@kfz-kennzeichen.de" )
    assertIsTrue( "\"Name\"@test.de" )
    assertIsTrue( "\"Name.\"@test.de" )
    assertIsTrue( "\"Name..\"@test.de" )
    assertIsTrue( "\"Name.\\\"\"@test.de" )
    assertIsTrue( "\".Name.\"@test.de" )
    assertIsTrue( "\"..Name..\"@test.de" )
    assertIsTrue( "\"...Name...\"@test.de" )
    assertIsTrue( "\" ...Name... \"@test.de" )
    assertIsTrue( "\"..Name\"@test.de" )
    assertIsTrue( "\"Name\"@test.de" )
    assertIsTrue( "\"\\\"Name.\\\"\"@test.de" )
    assertIsTrue( "\\\\\"Name.\\\"\"@test.de" )
    assertIsTrue( "\"Vorname.Nachname\"@test.de" )
    assertIsTrue( "\"Vorname+Nachname\"@test.de" )
    assertIsTrue( "\"Vorname.Nachname.\"@test.de" )
    assertIsTrue( "\"Vorname+Nachname.\"@test.de" )
    assertIsTrue( "\" 123,45 * 678,910 = 83.811,4395 \"@calc-test.de" )
    assertIsTrue( "\" 50.000,00 / 106,00 = 471.69811320754716981132075471698113 \"@calc-test.de" )
    assertIsTrue( "\" 2 + 2 = 3,999999999999999999999999991 \"@erste-hochrechnung.de" )
    assertIsTrue( "\"Joe\\\\Blow\"@example.com" )
    assertIsTrue( "\".John.Doe\"@example.com" )
    assertIsTrue( "\"John.Doe.\"@example.com" )
    assertIsTrue( "\"John..Doe\"@example.com" )
    assertIsTrue( "john@doe.com77" )
    assertIsTrue( "john.smith(comment)@example.com" )
    assertIsTrue( "(comment)john.smith@example.com" )
    assertIsTrue( "john.smith@(comment)example.com" )
    assertIsTrue( "john.smith@example.com(comment)" )
    assertIsTrue( "john.smith@example.com" )
    assertIsTrue( "joeuser+tag@example.com" )
    assertIsTrue( "jsmith@[192.168.2.1]" )
    assertIsTrue( "jsmith@[IPv6:2001:db8::1]" )
    assertIsTrue( "Fred\\ Bloggs@example.com" )
    assertIsTrue( "Joe.\\\\Blow@example.com" )
    assertIsTrue( "<john@doe.com>" )
    assertIsTrue( "John <john@doe.com>" )
    assertIsTrue( "{john'doe}@my.server" )
    assertIsFalse( "john.smith@exampl(comment)e.com" )
    assertIsFalse( "john.s(comment)mith@example.com" )
    assertIsFalse( "john.smith(comment)@(comment)example.com" )
    assertIsFalse( "john.smith(com@ment)example.com" )
    assertIsTrue( "john.doe@example.com" )
    assertIsTrue( "john.o'doe@example.com" )
    assertIsTrue( "jones@ms1.proseware.com" )
    assertIsFalse( "\"\"Joe Smith email@domain.com" )
    assertIsFalse( "\"\"Joe Smith' email@domain.com" )
    assertIsFalse( "\"\"Joe Smith\"\"email@domain.com" )
    assertIsFalse( "\"Joe Smith\" email@domain.com" )
    assertIsFalse( "\"Joe\\tSmith\".email@domain.com" )
    assertIsFalse( "\"Joe\"Smith\" email@domain.com" )
    assertIsFalse( "\"Joe Smith email@domain.com" )
    assertIsFalse( "\"Joe Smith' email@domain.com" )
    assertIsFalse( "\"Joe Smith\"email@domain.com" )
    assertIsFalse( "Joe Smith &lt;email@domain.com&gt;" )
    assertIsTrue( "email@domain-one.com" )
    assertIsTrue( "_______@domain.com" )
    assertIsTrue( "?????@domain.com" )
    assertIsFalse( "local@?????.com" )
    assertIsTrue( "\"B3V3RLY H1LL$\"@example.com" )
    assertIsFalse( "{something}@{something}.{something}" )
    assertIsTrue( "!def!xyz%abc@example.com" )
    assertIsTrue( "!sd@gh.com" )
    assertIsTrue( "$A12345@example.com" )
    assertIsTrue( "%20f3v34g34@gvvre.com" )
    assertIsTrue( "%2@gmail.com" )
    assertIsTrue( "\"-- --- .. -.\"@sh.de" )
    assertIsTrue( "{{-^-}{-=-}{-^-}}@GHI.JKL" )
    assertIsTrue( "#!$%&'*+-/=?^_`{}|~@eksample.org" )
    assertIsFalse( "eksample@#!$%&'*+-/=?^_`{}|~.org" )
    assertIsTrue( "$!{${$!{${!{$$$!$!${$!{.${!{$!{$$!${$!$!$$$!$!{$@WeB.dE" )
    assertIsFalse( "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2.4}" )
    assertIsTrue( "\"<script>alert('XSS')</script>\"@example.com " )
    assertIsTrue( "\"\\\" + \\\"select * from user\\\" + \\\"\"@example.de" )
    assertIsFalse( "${jndi:ldap://CheckThat.HowLovely.com/a}@log4j.com" )
    assertIsFalse( "ReDoSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" )
    assertIsFalse( "\"qu@example.com" )
    assertIsFalse( "\\$A12345@example.com" )
    assertIsFalse( "_@bde.cc," )
    assertIsFalse( "a..b@bde.cc" )
    assertIsFalse( "a.\"b@c\".x.\"@\".d.e@f.g@" )
    assertIsFalse( "a.b@example,co.de" )
    assertIsFalse( "a.b@example,com" )
    assertIsFalse( "a>b@somedomain.com" )
    assertIsFalse( "a@.com" )
    assertIsFalse( "a@b." )
    assertIsFalse( "a@b.-de.cc" )
    assertIsFalse( "a@b._de.cc" )
    assertIsFalse( "a@bde-.cc" )
    assertIsFalse( "a@bde.c-c" )
    assertIsFalse( "a@bde.cc." )
    assertIsFalse( "a@bde_.cc" )
    assertIsTrue( "a+b@bde.cc" )
    assertIsTrue( "a+b@c.com" )
    assertIsTrue( "a-b@bde.cc" )
    assertIsTrue( "a.a@test.com" )
    assertIsTrue( "a.b@com" )
    assertIsTrue( "a/d@somedomain.com" )
    assertIsTrue( "a2@bde.cc" )
    assertIsTrue( "a@123.45.67.89" )
    assertIsTrue( "a@b.c.com" )
    assertIsTrue( "a@b.com" )
    assertIsTrue( "a@bc.com" )
    assertIsTrue( "a@bcom" )
    assertIsTrue( "a@domain.com" )
    assertIsTrue( "a__z@provider.com" )
    assertIsTrue( "a_z%@gmail.com" )
    assertIsTrue( "aaron@theinfo.org" )
    assertIsTrue( "ab@288.120.150.10.com" )
    assertIsTrue( "ab@[120.254.254.120]" )
    assertIsTrue( "ab@b-de.cc" )
    assertIsTrue( "ab@c.com" )
    assertIsTrue( "ab_c@bde.cc" )
    assertIsTrue( "abc.\"defghi\".xyz@example.com" )
    assertIsTrue( "abc.efg@gmail.com" )
    assertIsTrue( "abc.xyz@gmail.com.in" )
    assertIsTrue( "abc123xyz@asdf.co.in" )
    assertIsTrue( "abc1_xyz1@gmail1.com" )
    assertIsTrue( "abc@abc.abc" )
    assertIsTrue( "abc@abc.abcd" )
    assertIsTrue( "abc@abc.abcde" )
    assertIsTrue( "abc@abc.co.in" )
    assertIsTrue( "abc@abc.com.com.com.com" )
    assertIsTrue( "abc@gmail.com.my" )
    assertIsTrue( "abc\\@def@example.com" )
    assertIsTrue( "abc\\\\@example.com" )
    assertIsTrue( "abcxyz123@qwert.com" )
    assertIsFalse( "ab@120.25.1111.120" )
    assertIsFalse( "ab@120.256.256.120" )
    assertIsFalse( "ab@188.120.150.10]" )
    assertIsFalse( "ab@988.120.150.10" )
    assertIsFalse( "ab@[188.120.150.10" )
    assertIsFalse( "ab@[188.120.150.10].com" )
    assertIsFalse( "ab@188.120.150.10]" )
    assertIsFalse( "ab@b+de.cc" )
    assertIsFalse( "ab@sd@dd" )
    assertIsFalse( "abc.@somedomain.com" )
    assertIsFalse( "abc@def@example.com" )
    assertIsFalse( "abc@gmail..com" )
    assertIsFalse( "abc@gmail.com.." )
    assertIsFalse( "abc\"defghi\"xyz@example.com" )
    assertIsFalse( "abc\\@example.com" )
    assertIsFalse( "abc\\\"def\\\"ghi@example.com" )
    assertIsFalse( "abc\\\\@def@example.com" )
    assertIsFalse( "as3d@dac.coas-" )
    assertIsFalse( "asd@dasd@asd.cm" )
    assertIsFalse( "check@this..com" )
    assertIsFalse( "check@thiscom" )
    assertIsFalse( "da23@das..com" )
    assertIsFalse( "dad@sds" )
    assertIsFalse( "dasddas-@.com" )
    assertIsFalse( "david.gilbertson@SOME+THING-ODD!!.com" )
    assertIsFalse( "dot.@example.com" )
    assertIsFalse( "doug@" )
    assertIsFalse( "email( (nested) )@plus.com" )
    assertIsFalse( "email(with @ in comment)plus.com" )
    assertIsFalse( "email)mirror(@plus.com" )
    assertIsFalse( "email..email@domain.com" )
    assertIsFalse( "email.@domain.com" )
    assertIsFalse( "email.domain.com" )
    assertIsFalse( "email@#hash.com" )
    assertIsFalse( "email@-domain.com" )
    assertIsFalse( "email@.domain.com" )
    assertIsFalse( "email@=qowaiv.com" )
    assertIsFalse( "email@caret^xor.com" )
    assertIsFalse( "email@colon:colon.com" )
    assertIsFalse( "email@dollar$.com" )
    assertIsFalse( "email@domain" )
    assertIsFalse( "email@domain-.com" )
    assertIsFalse( "email@domain..com" )
    assertIsTrue( "email@domain.co.de" )
    assertIsTrue( "email@domain.com (joe Smith)" )
    assertIsTrue( "email@domain.com" )
    assertIsFalse( "email@domain.com-" )
    assertIsFalse( "email@domain.com." )
    assertIsFalse( "email@domain.com>" )
    assertIsTrue( "email@domain.domain.domain.com.com" )
    assertIsTrue( "email@domain.domain.domain.domain.com.com" )
    assertIsTrue( "email@domain.domain.domain.domain.domain.com.com" )
    assertIsFalse( "email@domain@domain.com" )
    assertIsFalse( "email@example" )
    assertIsFalse( "email@example..com" )
    assertIsTrue( "email@example.co.uk" )
    assertIsFalse( "email@example.co.uk." )
    assertIsFalse( "email@example.com " )
    assertIsTrue( "email@example.com" )
    assertIsFalse( "email@exclamation!mark.com" )
    assertIsFalse( "email@grave`accent.com" )
    assertIsTrue( "email@mail.gmail.com" )
    assertIsFalse( "email@mailto:domain.com" )
    assertIsFalse( "email@obelix*asterisk.com" )
    assertIsFalse( "email@plus+.com" )
    assertIsFalse( "email@plus.com (not closed comment" )
    assertIsFalse( "email@plus.com (not closed comment" )
    assertIsFalse( "email@pp|e.com" )
    assertIsFalse( "email@p|pe.com" )
    assertIsFalse( "email@question?mark.com" )
    assertIsFalse( "email@r&amp;d.com" )
    assertIsFalse( "email@rightbracket}.com" )
    assertIsTrue( "email@subdomain.domain.com" )
    assertIsFalse( "email@wave~tilde.com" )
    assertIsFalse( "email@{leftbracket.com" )
    assertIsFalse( "mailto:mailto:email@domain.com" )
    assertIsFalse( "f...bar@gmail.com" )
    assertIsFalse( "fa ke@false.com" )
    assertIsFalse( "fake@-false.com" )
    assertIsFalse( "fake@fal se.com" )
    assertIsFalse( "fdsa" )
    assertIsFalse( "fdsa@" )
    assertIsFalse( "fdsa@fdsa" )
    assertIsFalse( "fdsa@fdsa." )
    assertIsFalse( "foo.bar#gmail.co.u" )
    assertIsFalse( "foo.bar@machine.sub\\@domain.example.museum" )
    assertIsFalse( "foo@bar@machine.subdomain.example.museum" )
    assertIsFalse( "foo~&(&)(@bar.com" )
    assertIsTrue( "foo\\@bar@example.com" )
    assertIsFalse( "gatsby@f.sc.ot.t.f.i.tzg.era.l.d." )
    assertIsFalse( "get_at_m.e@gmail" )
    assertIsFalse( "hallo2ww22@example....caaaao" )
    assertIsFalse( "hallo@example.coassjj#sswzazaaaa" )
    assertIsFalse( "hello world@example.com" )
    assertIsFalse( "invalid.email.com" )
    assertIsFalse( "invalid@email@domain.com" )
    assertIsFalse( "isis@100%.nl" )
    assertIsFalse( "j..s@proseware.com" )
    assertIsFalse( "j.@server1.proseware.com" )
    assertIsFalse( "jane@jungle.com: | /usr/bin/vacation" )
    assertIsFalse( "journaldev" )
    assertIsFalse( "journaldev()*@gmail.com" )
    assertIsFalse( "journaldev..2002@gmail.com" )
    assertIsFalse( "journaldev.@gmail.com" )
    assertIsFalse( "journaldev123@.com" )
    assertIsFalse( "journaldev123@.com.com" )
    assertIsFalse( "journaldev123@gmail.a" )
    assertIsFalse( "journaldev@%*.com" )
    assertIsFalse( "journaldev@.com.my" )
    assertIsFalse( "journaldev@gmail.com.1a" )
    assertIsFalse( "journaldev@journaldev@gmail.com" )
    assertIsFalse( "js@proseware..com" )
    assertIsFalse( "mailto:email@domain.com" )
    assertIsFalse( "mailto:mailto:email@domain.com" )
    assertIsFalse( "me..2002@gmail.com" )
    assertIsFalse( "me.@gmail.com" )
    assertIsFalse( "me123@.com" )
    assertIsFalse( "me123@.com.com" )
    assertIsFalse( "me@%*.com" )
    assertIsFalse( "me@.com.my" )
    assertIsFalse( "me@gmail.com.1a" )
    assertIsFalse( "me@me@gmail.com" )
    assertIsFalse( "myemail@@sample.com" )
    assertIsFalse( "myemail@sa@mple.com" )
    assertIsFalse( "myemailsample.com" )
    assertIsFalse( "myname@mail*.com" )
    assertIsFalse( "ote\"@example.com" )
    assertIsFalse( "pio_pio@#factory.com" )
    assertIsFalse( "pio_pio@factory.c#om" )
    assertIsFalse( "pio_pio@factory.c*om" )
    assertIsFalse( "plain.address" )
    assertIsFalse( "plainaddress" )
    assertIsFalse( "tarzan@jungle.org,jane@jungle.org" )
    assertIsFalse( "this is not valid@email$com" )
    assertIsFalse( "this\\ still\\\"not\\allowed@example.com" )
    assertIsFalse( "two..dot@example.com" )
    assertIsFalse( "user#domain.com" )
    assertIsFalse( "username@yahoo..com" )
    assertIsFalse( "username@yahoo.c" )
    assertIsTrue( "username@domain.com" )
    assertIsTrue( "_username@domain.com" )
    assertIsTrue( "username_@domain.com" )
    assertIsFalse( "xxx@u*.com" )
    assertIsFalse( "xxxx..1234@yahoo.com" )
    assertIsFalse( "xxxx.ourearth.com" )
    assertIsFalse( "xxxx123@gmail.b" )
    assertIsFalse( "xxxx@.com.my" )
    assertIsFalse( "xxxx@.org.org" )
    assertIsFalse( "xxxxx()*@gmail.com" )
    assertIsTrue( "--@ooo.ooo" )
    assertIsTrue( "-@bde.cc" )
    assertIsTrue( "-asd@das.com" )
    assertIsTrue( "1234567890@domain.com" )
    assertIsTrue( "1@domain.com" )
    assertIsTrue( "1@gmail.com" )
    assertIsTrue( "1_example@something.gmail.com" )
    assertIsTrue( "2@bde.cc" )
    assertIsTrue( "3c296rD3HNEE@d139c.a51" )
    assertIsTrue( "<boss@nil.test>" )
    assertIsTrue( "A__z/J0hn.sm{it!}h_comment@example.com.co" )
    assertIsTrue( "Abc.123@example.com" )
    assertIsTrue( "Abc@10.42.0.1" )
    assertIsTrue( "Abc@example.com" )
    assertIsTrue( "D.Oy'Smith@gmail.com" )
    assertIsTrue( "mymail\\@hello@hotmail.com" )
    assertIsTrue( "PN=Joe/OU=X400/@gateway.com" )
    assertIsTrue( "This is <john@127.0.0.1>" )
    assertIsTrue( "This is <john@[127.0.0.1]>" )
    assertIsTrue( "Who? <one@y.test>" )
    assertIsTrue( "\"%2\"@gmail.com" )
    assertIsTrue( "\"Abc@def\"@example.com" )
    assertIsTrue( "\"Abc\\@def\"@example.com" )
    assertIsTrue( "\"Doug \\\"Ace\\\" L.\"@example.com" )
    assertIsTrue( "\"Fred Bloggs\"@example.com" )
    assertIsTrue( "\"Fred\\ Bloggs\"@example.com" )
    assertIsTrue( "\"Giant; \\\"Big\\\" Box\" <sysservices@example.net>" )
    assertIsTrue( "\"Look at all these spaces!\"@example.com" )
    assertIsTrue( "\"a..b\"@gmail.com" )
    assertIsTrue( "\"a@b\"@example.com" )
    assertIsTrue( "\"a_b\"@gmail.com" )
    assertIsTrue( "\"abcdefghixyz\"@example.com" )
    assertIsTrue( "\"cogwheel the orange\"@example.com" )
    assertIsTrue( "\"foo\\@bar\"@Something.com" )
    assertIsTrue( "\"j\\\"s\"@proseware.com" )
    assertIsTrue( "\"myemail@sa\"@mple.com" )
    assertIsFalse( "\"Doug \"Ace\" L.\"@example.com" )
    assertIsFalse( "\"Joe Q. Public\" <john.q.public@example.com>" )
    assertIsFalse( "\"Joe\\Blow\"@example.com" )
    assertIsTrue( "\"this is v@lid!\"@example.com" )
    assertIsTrue( "_-_@bde.cc" )
    assertIsTrue( "_@gmail.com" )
    assertIsTrue( "_dasd@sd.com" )
    assertIsTrue( "_dasd_das_@9.com" )
    assertIsTrue( "_somename@example.com" )
    assertIsTrue( "a&d@somedomain.com" )
    assertIsTrue( "a*d@somedomain.com" )
    assertIsTrue( "alex@example.com" )
    assertIsTrue( "alireza@test.co.uk" )
    assertIsTrue( "asd-@asd.com" )
    assertIsTrue( "begeddov@jfinity.com" )
    assertIsTrue( "check@this.com" )
    assertIsTrue( "cog@wheel.com" )
    assertIsTrue( "customer/department=shipping@example.com" )
    assertIsTrue( "d._.___d@gmail.com" )
    assertIsTrue( "d.j@server1.proseware.com" )
    assertIsTrue( "d.oy.smith@gmail.com" )
    assertIsTrue( "d23d@da9.co9" )
    assertIsTrue( "d_oy_smith@gmail.com" )
    assertIsTrue( "dasd-dasd@das.com.das" )
    assertIsTrue( "dasd.dadas@dasd.com" )
    assertIsTrue( "dasd_-@jdas.com" )
    assertIsTrue( "david.jones@proseware.com" )
    assertIsTrue( "dda_das@das-dasd.com" )
    assertIsTrue( "digit-only-domain-with-subdomain@sub.123.com" )
    assertIsTrue( "digit-only-domain@123.com" )
    assertIsTrue( "doysmith@gmail.com" )
    assertIsTrue( "drp@drp.cz" )
    assertIsTrue( "dsq!a?@das.com" )
    assertIsTrue( "example@example.co" )
    assertIsTrue( "f.f.f@bde.cc" )
    assertIsTrue( "f.o.o.b.a.r@gmail.com" )
    assertIsTrue( "first-name-last-name@d-a-n.com" )
    assertIsTrue( "firstname+lastname@domain.com" )
    assertIsTrue( "firstname-lastname@domain.com" )
    assertIsTrue( "firstname.lastname@domain.com" )
    assertIsTrue( "foo\\@bar@machine.subdomain.example.museum" )
    assertIsTrue( "futureTLD@somewhere.fooo" )
    assertIsTrue( "hello.me_1@email.com" )
    assertIsTrue( "hello7___@ca.com.pt" )
    assertIsTrue( "info@ermaelan.com" )
    assertIsTrue( "j.s@server1.proseware.com" )
    assertIsTrue( "j@proseware.com9" )
    assertIsTrue( "j_9@[129.126.118.1]" )
    assertIsTrue( "jinujawad6s@gmail.com" )
    assertIsTrue( "journaldev+100@gmail.com" )
    assertIsTrue( "journaldev-100@journaldev.net" )
    assertIsTrue( "journaldev-100@yahoo-test.com" )
    assertIsTrue( "journaldev-100@yahoo.com" )
    assertIsTrue( "journaldev.100@journaldev.com.au" )
    assertIsTrue( "journaldev.100@yahoo.com" )
    assertIsTrue( "journaldev111@journaldev.com" )
    assertIsTrue( "journaldev@1.com" )
    assertIsTrue( "journaldev@gmail.com.com" )
    assertIsTrue( "journaldev@yahoo.com" )
    assertIsTrue( "journaldev_100@yahoo-test.ABC.CoM" )
    assertIsTrue( "js#internal@proseware.com" )
    assertIsTrue( "js*@proseware.com" )
    assertIsTrue( "js@proseware.com9" )
    assertIsTrue( "me+100@me.com" )
    assertIsTrue( "me+alpha@example.com" )
    assertIsTrue( "me-100@me.com" )
    assertIsTrue( "me-100@me.com.au" )
    assertIsTrue( "me-100@yahoo-test.com" )
    assertIsTrue( "me.100@me.com" )
    assertIsTrue( "me@aaronsw.com" )
    assertIsTrue( "me@company.co.uk" )
    assertIsTrue( "me@gmail.com" )
    assertIsTrue( "me@gmail.com" )
    assertIsTrue( "me@mail.s2.example.com" )
    assertIsTrue( "me@me.cu.uk" )
    assertIsTrue( "my.ownsite@ourearth.org" )
    assertIsFalse( "myemail@sample" )
    assertIsTrue( "myemail@sample.com" )
    assertIsTrue( "mysite@you.me.net" )
    assertIsTrue( "o'hare@example.com" )
    assertIsTrue( "peter.example@domain.comau" )
    assertIsTrue( "peter.piper@example.com" )
    assertIsTrue( "peter_123@news.com" )
    assertIsTrue( "pio^_pio@factory.com" )
    assertIsTrue( "pio_#pio@factory.com" )
    assertIsTrue( "pio_pio@factory.com" )
    assertIsTrue( "pio_~pio@factory.com" )
    assertIsTrue( "piskvor@example.lighting" )
    assertIsTrue( "rss-dev@yahoogroups.com" )
    assertIsTrue( "someone+tag@somewhere.net" )
    assertIsTrue( "someone@somewhere.co.uk" )
    assertIsTrue( "someone@somewhere.com" )
    assertIsTrue( "something_valid@somewhere.tld" )
    assertIsTrue( "tvf@tvf.cz" )
    assertIsTrue( "user#@domain.co.in" )
    assertIsTrue( "user'name@domain.co.in" )
    assertIsTrue( "user+mailbox@example.com" )
    assertIsTrue( "user-name@domain.co.in" )
    assertIsTrue( "user.name@domain.com" )
    assertIsFalse( ".user.name@domain.com" )
    assertIsFalse( "user-name@domain.com." )
    assertIsFalse( "username@.com" )
    assertIsTrue( "user1@domain.com" )
    assertIsTrue( "user?name@domain.co.in" )
    assertIsTrue( "user@domain.co.in" )
    assertIsTrue( "user@domain.com" )
    assertIsFalse( "user@domaincom" )
    assertIsTrue( "user_name@domain.co.in" )
    assertIsTrue( "user_name@domain.com" )
    assertIsTrue( "username@yahoo.corporate" )
    assertIsTrue( "username@yahoo.corporate.in" )
    assertIsTrue( "username+something@domain.com" )
    assertIsTrue( "vdv@dyomedea.com" )
    assertIsTrue( "xxxx@gmail.com" )
    assertIsTrue( "xxxxxx@yahoo.com" )
    assertIsFalse( "first;name)lastname@domain.com(blah" )
    assertIsTrue( "user@[IPv6:2001:DB8::1]" )
    assertIsFalse( "user@localserver" )
    assertIsTrue( "w.b.f@test.com" )
    assertIsTrue( "w.b.f@test.museum" )
    assertIsTrue( "yoursite@ourearth.com" )
    assertIsTrue( "~pio_pio@factory.com" )

    assertIsTrue( "{^c\\@**Dog^}@cartoon.com" )
    assertIsFalse( "the-character-limit@for-each-part.of-the-domain.is-sixty-three-characters.this-is-exactly-sixty-four-characters-so-it-is-invalid-blah-blah.com" )
    assertIsFalse( "the-total-length@of-an-entire-address.cannot-be-longer-than-two-hundred-and-fifty-six-characters.and-this-address-is-257-characters-exactly.so-it-should-be-invalid.and-im-going-to-add-some-more-words-here.to-increase-the-lenght-blah-blah-blah-blah-blah-.org" )
    assertIsTrue( "the-character-limit@for-each-part.of-the-domain.is-sixty-three-characters.this-is-exactly-sixty-three-characters-so-it-is-valid-blah-blah.com" )
    assertIsTrue( "the-total-length@of-an-entire-address.cannot-be-longer-than-two-hundred-and-fifty-four-characters.and-this-address-is-254-characters-exactly.so-it-should-be-valid.and-im-going-to-add-some-more-words-here.to-increase-the-lenght-blah-blah-blah-blah-bla.org" )
    assertIsFalse( "the-local-part-is-invalid-if-it-is-longer-than-sixty-four-characters@sld.net" )
    assertIsTrue( "unusual+but+valid+email1900=/!#$%&\\'*+-/=?^_`.{|}~@example.com" )

    assertIsTrue( "valid@[1.1.1.1]" )
    assertIsTrue( "valid.ipv6v4.addr@[IPv6:aaaa:aaaa:aaaa:aaaa:aaaa:aaaa:127.0.0.1]" )
    assertIsTrue( "valid.ipv6v4.addr@[IPv6:::12.34.56.78]" )
    assertIsTrue( "valid.ipv6.addr@[IPv6:fe80::230:48ff:fe33:bc33]" )
    assertIsTrue( "valid.ipv6.addr@[IPv6:fe80:0000:0000:0000:0202:b3ff:fe1e:8329]" )
    assertIsTrue( "valid.ipv6.addr@[IPv6:::]" )
    assertIsTrue( "valid.ipv6.addr@[IPv6:::3333:4444:5555:6666:7777:8888]" )
    assertIsTrue( "valid.ipv6.addr@[IPv6:::12.34.56.78]" )
    assertIsTrue( "valid.ipv6.addr@[IPv6:2607:f0d0:1002:51::4]" )
    assertIsTrue( "valid.ipv6.addr@[IPv6:0::1]" )
    assertIsTrue( "valid.ipv4.addr@[255.255.255.255]" )
    assertIsTrue( "valid.ipv4.addr@[123.1.72.10]" )

    assertIsFalse( "\"invalid-qstring@example.com" ) # unterminated q-string in local-part of the addr-spec);  
    assertIsFalse( "\"locál-part\"@example.com" ) # international local-part when allowInternational=false should fail);
    assertIsFalse( "invalid @" )
    assertIsFalse( "invalid" )
    assertIsFalse( "invalid@" )
    assertIsFalse( "invalid@[10.1.52]" )
    assertIsFalse( "invalid@[10.1]" )
    assertIsFalse( "invalid@[10]" )
    assertIsFalse( "invalid@[111.111.111.111" ) # unenclosed IPv4 literal);
    assertIsFalse( "invalid@[127.0.0.1.]" )
    assertIsFalse( "invalid@[127.0.0.1]." )
    assertIsFalse( "invalid@[127.0.0.1]x" )
    assertIsFalse( "invalid@[256.256.256.256]" )
    assertIsFalse( "invalid@[555.666.777.888]" )
    assertIsFalse( "invalid@[IPv6:1111:1111]" ) # incomplete IPv6);
    assertIsFalse( "invalid@[IPv6:1111::1111::1111]" ) # invalid IPv6-comp);
    assertIsFalse( "invalid@[IPv6:1111:::1111::1111]" ) # more than 2 consecutive :'s in IPv6);
    assertIsFalse( "invalid@[IPv6:123456]" )
    assertIsFalse( "invalid@[IPv6:1::2:]" ) # incomplete IPv6);
    assertIsFalse( "invalid@[IPv6:2607:f0d0:1002:51::4" ) # unenclosed IPv6 literal);
    assertIsFalse( "invalid@[IPv6::1::1]" )
    assertIsFalse( "invalid@[IPv6:aaaa:aaaa:aaaa:aaaa:aaaa:aaaa:555.666.777.888]" ) # invalid IPv4 address in IPv6v4);
    assertIsFalse( "invalid@[]" ) # empty IP literal);
    assertIsFalse( "invalid@domain1.com@domain2.com" )

def runTestEmailValidator4J():

    wlHeadline( "https://github.com/egulias/EmailValidator4J" )

    assertIsFalse( "nolocalpart.com" )
    assertIsFalse( "test@example.com test" )
    assertIsFalse( "user  name@example.com" )
    assertIsFalse( "user   name@example.com" )
    assertIsFalse( "example.@example.co.uk" )
    assertIsFalse( "example@example@example.co.uk" )
    assertIsFalse( "(test_exampel@example.fr}" )
    assertIsFalse( "example(example)example@example.co.uk" )
    assertIsFalse( ".example@localhost" )
    assertIsFalse( "ex\\ample@localhost" )
    assertIsFalse( "example@local\\host" )
    assertIsFalse( "example@localhost." )
    assertIsFalse( "user name@example.com" )
    assertIsFalse( "username@ example . com" )
    assertIsFalse( "example@(fake}.com" )
    assertIsFalse( "example@(fake.com" )
    assertIsTrue( "username@example.com" )
    assertIsTrue( "usern.ame@example.com" )
    assertIsFalse( "user[na]me@example.com" )
    assertIsFalse( "\"\"\"@iana.org" )
    assertIsFalse( "\"\\\"@iana.org" )
    assertIsFalse( "\"test\"test@iana.org" )
    assertIsFalse( "\"test\"\"test\"@iana.org" )
    assertIsTrue( "\"test\".\"test\"@iana.org" )
    assertIsTrue( "\"test\".test@iana.org" )
    assertIsFalse( "\"test\\\"@iana.org" )
    assertIsFalse( "\r\ntest@iana.org" )
    assertIsFalse( "\r\n test@iana.org" )
    assertIsFalse( "\r\n \r\ntest@iana.org" )
    assertIsFalse( "\r\n \r\n test@iana.org" )
    assertIsFalse( "test@iana.org \r\n" )
    assertIsFalse( "test@iana.org \r\n " )
    assertIsFalse( "test@iana.org \r\n \r\n" )
    assertIsFalse( "test@iana.org \r\n\r\n" )
    assertIsFalse( "test@iana.org  \r\n\r\n " )
    assertIsFalse( "test@iana/icann.org" )
    assertIsFalse( "test@foo;bar.com" )
    assertIsFalse( "comment)example@example.com" )
    assertIsFalse( "comment(example))@example.com" )
    assertIsFalse( "example@example)comment.com" )
    assertIsFalse( "example@example(comment)).com" )
    assertIsFalse( "example@[1.2.3.4" )
    assertIsFalse( "example@[IPv6:1:2:3:4:5:6:7:8" )
    assertIsFalse( "exam(ple@exam).ple" )
    assertIsFalse( "example@(example))comment.com" )
    assertIsTrue( "example@example.com" )
    assertIsTrue( "example@example.co.uk" )
    assertIsTrue( "example_underscore@example.fr" )
    assertIsTrue( "exam'ple@example.com" )
    assertIsTrue( "exam\\ ple@example.com" )
    assertIsFalse( "example((example))@fakedfake.co.uk" )
    assertIsFalse( "example@faked(fake).co.uk" )
    assertIsTrue( "example+@example.com" )
    assertIsTrue( "example@with-hyphen.example.com" )
    assertIsTrue( "with-hyphen@example.com" )
    assertIsTrue( "example@1leadingnum.example.com" )
    assertIsTrue( "1leadingnum@example.com" )
    assertIsTrue( "инфо@письмо.рф" )
    assertIsTrue( "\"username\"@example.com" )
    assertIsTrue( "\"user.name\"@example.com" )
    assertIsTrue( "\"user name\"@example.com" )
    assertIsTrue( "\"user@name\"@example.com" )
    assertIsFalse( "\"\\a\"@iana.org" )
    assertIsTrue( "\"test\\ test\"@iana.org" )
    assertIsFalse( "\"\"@iana.org" )
    assertIsFalse( "\"\"@[]" )
    assertIsTrue( "\"\\\"\"@iana.org" )
    assertIsTrue( "example@localhost" )

def runTestWikipedia():

    wlHeadline( "https://en.wikipedia.org/wiki/Email_address/" )

    assertIsTrue( "MaxMuster(Kommentar)@example.com" )
    assertIsTrue( "\"MaxMustermann\"@example.com" )
    assertIsTrue( "Max.\"Musterjunge\".Mustermann@example.com" )
    assertIsTrue( "surelsaya@surabaya.vibriel.net.id" )
    assertIsTrue( "Marc Dupont <md118@example.com>" )
    assertIsTrue( "simple@example.com" )
    assertIsTrue( "very.common@example.com" )
    assertIsTrue( "disposable.style.email.with+symbol@example.com" )
    assertIsTrue( "other.email-with-hyphen@example.com" )
    assertIsTrue( "fully-qualified-domain@example.com" )
    assertIsTrue( "user.name+tag+sorting@example.com" )
    assertIsTrue( "user+mailbox/department=shipping@example.com" )
    assertIsTrue( "!#$%&'*+-/=?^_`.{|}~@example.com" )
    assertIsTrue( "x@example.com" )
    assertIsTrue( "info@firma.org" )
    assertIsTrue( "example-indeed@strange-example.com" )
    assertIsTrue( "admin@mailserver1" )
    assertIsTrue( "example@s.example" )
    assertIsTrue( "\" \"@example.org" )
    assertIsTrue( "mailhost!username@example.org" )
    assertIsTrue( "joe25317@NOSPAMexample.com" )
    assertIsTrue( "Peter.Zapfl@Telekom.DBP.De" )
    assertIsTrue( "nama@contoh.com" )
    assertIsFalse( "\"John Smith\" (johnsmith@example.com)" ) # ?
    assertIsFalse( "just\"not\"right@example.com" )
    assertIsFalse( "this is\"not\\allowed@example.com" )
    assertIsFalse( "this\\ still\\\"not\\\\allowed@example.com" )
    assertIsTrue( "i_like_underscore@but_Underscore_is_not_allowed_in_domain_part.com" )
    assertIsTrue( "(buero)office@example.com" )
    assertIsTrue( "office(etage-3)@example.com" )
    assertIsFalse( "off(kommentar)ice@example.com" )
    assertIsTrue( "\"(buero)office\"@example.com" )
    assertIsTrue( "\"office(etage-3)\"@example.com" )
    assertIsTrue( "\"off(kommentar)ice\"@example.com" )
    assertIsTrue( "\"address(comment)\"@example.com" )
    assertIsTrue( "Buero <office@example.com>" )
    assertIsTrue( "\"vorname(Kommentar).nachname\"@provider.de" )
    assertIsTrue( "\"Herr \\\"Kaiser\\\" Franz Beckenbauer\" <local-part@domain-part.com>" )
    assertIsTrue( "Erwin Empfaenger <erwin@example.com>" )
    
def runAllTests():    
    runTestAtSign()
    runTestSeperator()
    runTestIP4()
    runTestIP6()
    runTestUnsortet()
    runTestDisplayName()
    runTestStrings()
    runTestComments()
    runTestCorrect()
    
    runTestEmailValidator4J()
    runTestWikipedia()
    runTestWikipedia()
    
runAllTests()

email_ok_proz_true_korrekt_erkannt         = formatDouble( ( 100.0 * TRUE_RESULT_COUNT_EMAIL_IS_TRUE ) / COUNT_ASSERT_IS_TRUE )
email_ok_proz_false_korrekt_erkannt        = formatDouble( ( 100.0 * FALSE_RESULT_COUNT_EMAIL_IS_FALSE ) / COUNT_ASSERT_IS_FALSE )
email_ok_proz_korrekt_erkannt_insgesamt    = formatDouble( ( 100.0 * ( TRUE_RESULT_COUNT_EMAIL_IS_TRUE + FALSE_RESULT_COUNT_EMAIL_IS_FALSE ) ) / ( COUNT_ASSERT_IS_TRUE + COUNT_ASSERT_IS_FALSE )  )

email_false_proz_true_korrekt_erkannt      = formatDouble( ( 100.0 * TRUE_RESULT_COUNT_EMAIL_IS_FALSE ) / COUNT_ASSERT_IS_TRUE )
email_false_proz_false_korrekt_erkannt     = formatDouble( ( 100.0 * FALSE_RESULT_COUNT_EMAIL_IS_TRUE ) / COUNT_ASSERT_IS_FALSE )
email_false_proz_korrekt_erkannt_insgesamt = formatDouble( ( 100.0 * ( TRUE_RESULT_COUNT_EMAIL_IS_FALSE + FALSE_RESULT_COUNT_EMAIL_IS_TRUE ) ) / ( COUNT_ASSERT_IS_TRUE + COUNT_ASSERT_IS_FALSE ) )


wlHeadline( "Statistik" )

#wl( email_ok_proz_true_korrekt_erkannt )
#wl( email_ok_proz_false_korrekt_erkannt )
#wl( email_ok_proz_korrekt_erkannt_insgesamt )
#wl( email_false_proz_true_korrekt_erkannt )
#wl( email_false_proz_false_korrekt_erkannt )
#wl( email_false_proz_korrekt_erkannt_insgesamt )
#wl( "" )

print( f"  ASSERT_IS_TRUE  { getEinzug( COUNT_ASSERT_IS_TRUE )  } | KORREKT { getEinzug( TRUE_RESULT_COUNT_EMAIL_IS_TRUE )   } = { getEinzug( email_ok_proz_true_korrekt_erkannt )  } % | FALSCH ERKANNT { getEinzug( TRUE_RESULT_COUNT_EMAIL_IS_FALSE ) } = { getEinzug( email_false_proz_true_korrekt_erkannt )  } % = Error { getEinzug( TRUE_RESULT_COUNT_ERROR )  }" )
print( f"  ASSERT_IS_FALSE { getEinzug( COUNT_ASSERT_IS_FALSE ) } | KORREKT { getEinzug( FALSE_RESULT_COUNT_EMAIL_IS_FALSE ) } = { getEinzug( email_ok_proz_false_korrekt_erkannt ) } % | FALSCH ERKANNT { getEinzug( FALSE_RESULT_COUNT_EMAIL_IS_TRUE ) } = { getEinzug( email_false_proz_false_korrekt_erkannt ) } % = Error { getEinzug( FALSE_RESULT_COUNT_ERROR ) }" )

#print( "  GESAMT          " , getEinzug( COUNT_ASSERT_IS_TRUE , COUNT_ASSERT_IS_FALSE ) , "   KORREKT " , getEinzug( ( TRUE_RESULT_COUNT_EMAIL_IS_TRUE , FALSE_RESULT_COUNT_EMAIL_IS_FALSE ) ) , " = " , getEinzug( email_ok_proz_korrekt_erkannt_insgesamt ) , getEinzug( email_ok_proz_korrekt_erkannt_insgesamt ) , " % | FALSCH ERKANNT " , getEinzug( FALSE_RESULT_COUNT_EMAIL_IS_TRUE , TRUE_RESULT_COUNT_EMAIL_IS_FALSE ) , " = " , getEinzug( email_false_proz_korrekt_erkannt_insgesamt ) , getEinzug( email_false_proz_korrekt_erkannt_insgesamt ) , " % = Error " , ( TRUE_RESULT_COUNT_ERROR , FALSE_RESULT_COUNT_ERROR ) )
wl( "" )
